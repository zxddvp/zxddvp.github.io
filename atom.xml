<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张显达的个人博客</title>
  
  <subtitle>张显达 zxd blog</subtitle>
  <link href="https://zhangxianda.com/atom.xml" rel="self"/>
  
  <link href="https://zhangxianda.com/"/>
  <updated>2025-10-20T01:23:46.049Z</updated>
  <id>https://zhangxianda.com/</id>
  
  <author>
    <name>张显达</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025-10-20 后端内核脉搏：Linux 6.17.4 稳定版（10/19）对服务内核的启示</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-backend-linux-6-17-4-stable-impact/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-backend-linux-6-17-4-stable-impact/</id>
    <published>2025-10-20T03:18:00.000Z</published>
    <updated>2025-10-20T01:23:46.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>kernel.org 显示 6.17.4 于 10&#x2F;19 成为最新稳定版本（stable: 6.17.4）。对后端团队而言，10&#x2F;20 是评估“是否&#x2F;如何”采纳该稳定版的好时点。本文给出一份“服务内核升级”的工程指南：如何识别受益点与风险点、如何以金丝雀与回滚降低成本、如何把“内核演进”纳入常规节奏。</p><h2 id="为什么关注-6-17-x-稳定版"><a href="#为什么关注-6-17-x-稳定版" class="headerlink" title="为什么关注 6.17.x 稳定版"></a>为什么关注 6.17.x 稳定版</h2><ul><li>修复累计：稳定分支聚合了若干 bugfix 与回归修复；</li><li>性能与可靠性：特定子系统（网络栈、文件系统、调度器）的微优化可能改善尾延迟；</li><li>安全合规：供应链&#x2F;容器&#x2F;虚拟化相关修补降低脆弱面；</li><li>兼容性：与 Docker&#x2F;CRI、eBPF 工具链、驱动版本的配合。</li></ul><h2 id="评估与预演"><a href="#评估与预演" class="headerlink" title="评估与预演"></a>评估与预演</h2><ul><li>变更梳理：阅读 6.17.1–6.17.4 的 ChangeLog，提取与业务相关的子系统；</li><li>影子环境：在预发&#x2F;影子机房使用相同硬件&#x2F;虚拟化环境评估；</li><li>eBPF：检查 BPF 程序&#x2F;探针在新内核的加载与性能；</li><li>I&#x2F;O 栈：文件系统&#x2F;块设备&#x2F;网络驱动的延迟与吞吐回归。</li></ul><h2 id="上线与回滚"><a href="#上线与回滚" class="headerlink" title="上线与回滚"></a>上线与回滚</h2><ul><li>金丝雀：从低风险服务开始，逐步扩展至高价值服务；</li><li>观测：延迟分布、软&#x2F;硬中断、上下文切换、队列长度；</li><li>回滚：保留旧内核入口，脚本化“批量回退”；</li><li>灰度策略：按机架&#x2F;可用区递进，控制 blast radius。</li></ul><h2 id="与用户态的边界"><a href="#与用户态的边界" class="headerlink" title="与用户态的边界"></a>与用户态的边界</h2><ul><li>容器：cgroup v2、命名空间与 seccomp 行为在升级后需复核；</li><li>eBPF：XDP&#x2F;TC 程序、观测探针、可视化与样本率；</li><li>依赖：数据库&#x2F;消息队列&#x2F;反向代理组件在内核变更下的行为差异。</li></ul><h2 id="度量与报告"><a href="#度量与报告" class="headerlink" title="度量与报告"></a>度量与报告</h2><ul><li>升级覆盖率、失败率、回滚次数；</li><li>关键业务 SLO 波动范围；</li><li>内核相关事故数与 MTTR；</li><li>下游团队（DBA&#x2F;网工&#x2F;平台）反馈与问题单关闭时长。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>服务内核的升级不求“第一时间”，但应“第一时间评估”。把 6.17.4 这类稳定分支纳入周期性评估，长期看能降低事故概率与潜在安全风险。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>The Linux Kernel Archives（stable: 6.17.4 on 2025-10-19）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;kernel.org 显示 6.17.4 于 10&amp;#x2F;19 成为最新稳定版本（stable: 6.17.4）。对后端团队而言，10&amp;</summary>
      
    
    
    
    <category term="后端" scheme="https://zhangxianda.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Linux Kernel 6.17.4" scheme="https://zhangxianda.com/tags/Linux-Kernel-6-17-4/"/>
    
    <category term="稳定分支" scheme="https://zhangxianda.com/tags/%E7%A8%B3%E5%AE%9A%E5%88%86%E6%94%AF/"/>
    
    <category term="生产内核" scheme="https://zhangxianda.com/tags/%E7%94%9F%E4%BA%A7%E5%86%85%E6%A0%B8/"/>
    
    <category term="可回滚" scheme="https://zhangxianda.com/tags/%E5%8F%AF%E5%9B%9E%E6%BB%9A/"/>
    
    <category term="变更评估" scheme="https://zhangxianda.com/tags/%E5%8F%98%E6%9B%B4%E8%AF%84%E4%BC%B0/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 前端工程：React Compiler 渐进式上线作战图（基线→灰度→规范）</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-frontend-react-compiler-rollout-plan/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-frontend-react-compiler-rollout-plan/</id>
    <published>2025-10-20T03:10:00.000Z</published>
    <updated>2025-10-20T01:23:31.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>伴随 10 月 1 日的 React 19.2 与 10 月 7 日的 React Compiler v1.0 稳定版，编译器驱动的性能优化进入“可落地”阶段。10&#x2F;20 的建议是把上线写成“作战图”：基线→灰度→规范三段式，并将回滚阈值、观测指标与团队规范沉淀为长期资产。</p><h2 id="基线：先量化，再优化"><a href="#基线：先量化，再优化" class="headerlink" title="基线：先量化，再优化"></a>基线：先量化，再优化</h2><ul><li>指标：INP、渲染次数、内存峰值、交互响应；</li><li>页面：高价值（列表&#x2F;表格&#x2F;编辑器&#x2F;报表&#x2F;白板）优先；</li><li>工具：React Profiler、web-vitals、User Timing；</li><li>产出：渲染预算表与“可观测面板”。</li></ul><h2 id="灰度：从小范围赢得信心"><a href="#灰度：从小范围赢得信心" class="headerlink" title="灰度：从小范围赢得信心"></a>灰度：从小范围赢得信心</h2><ul><li>金丝雀：从 5% 用户或内部员工开始；</li><li>场景：<ul><li>高频列表：稳定引用 + 分段渲染；</li><li>表单：useEffectEvent 解耦副作用；</li><li>富交互：隔离可变第三方库；</li></ul></li><li>回退：触发阈值（INP↑&#x2F;错误率↑&#x2F;内存↑）立刻回退至未开启 Compiler 的构建。</li></ul><h2 id="规范：让“自动优化”有边界"><a href="#规范：让“自动优化”有边界" class="headerlink" title="规范：让“自动优化”有边界"></a>规范：让“自动优化”有边界</h2><ul><li>数据不可变：状态更新遵守不可变，避免隐式共享；</li><li>稳定引用：事件&#x2F;对象&#x2F;函数稳定化；</li><li>副作用归位：事件处理与副作用分离；</li><li>组件拆分：容器&#x2F;展示&#x2F;控制边界清晰；</li><li>SSR&#x2F;RSC：校验数据获取与边界时序。</li></ul><h2 id="可观测与回滚"><a href="#可观测与回滚" class="headerlink" title="可观测与回滚"></a>可观测与回滚</h2><ul><li>观测：在追踪中记录“Compiler 开关&#x2F;配置”，与 INP&#x2F;渲染&#x2F;错误指标关联；</li><li>回滚：保留上一版产物与配置，提供“一键回退”脚本；</li><li>复盘：记录“配置 → 指标变化”的因果，产出规范增补与最佳实践卡片。</li></ul><h2 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h2><ul><li>评审：为“Compiler 相关 PR”设立专门 check-list；</li><li>培训：面向组件作者&#x2F;页面 Owner 的短训营；</li><li>文档：内网维基沉淀“反模式&#x2F;案例&#x2F;度量面板”。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>编译器可以“自动把简单事做对”，复杂的边界仍需工程实践。把作战图写清楚，性能红利才能稳稳落地。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>React 19.2、Compiler v1.0 与 React Conf 2025 Recap（官方博客 10 月）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;伴随 10 月 1 日的 React 19.2 与 10 月 7 日的 React Compiler v1.0 稳定版，编译器驱动的性能优化</summary>
      
    
    
    
    <category term="前端" scheme="https://zhangxianda.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React Compiler" scheme="https://zhangxianda.com/tags/React-Compiler/"/>
    
    <category term="可观测" scheme="https://zhangxianda.com/tags/%E5%8F%AF%E8%A7%82%E6%B5%8B/"/>
    
    <category term="React 19" scheme="https://zhangxianda.com/tags/React-19/"/>
    
    <category term="性能工程" scheme="https://zhangxianda.com/tags/%E6%80%A7%E8%83%BD%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="规范与回滚" scheme="https://zhangxianda.com/tags/%E8%A7%84%E8%8C%83%E4%B8%8E%E5%9B%9E%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 物联网运维：LoRaWAN × 卫星接入的季度稽核与SLA治理</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-iot-ops-lpwan-satellite-audit/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-iot-ops-lpwan-satellite-audit/</id>
    <published>2025-10-20T03:02:00.000Z</published>
    <updated>2025-10-20T01:23:16.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>结合 10 月的 LoRa Alliance 动态（TTI × Wien Energie 本地化网络服务器）与 9 月底土耳其监管对 LEO 卫星物联网的授权，可以明确：城市级 IoT 的主旋律是“多接入融合 + 可治理运维”。在 10&#x2F;20 这个季度节点，建议对 LoRaWAN × 卫星的混合接入进行一次“季度稽核”：对覆盖、时延、丢包、电池寿命、运维工单与合规模块做全链路体检，并更新 SLA 与费用模型。</p><h2 id="稽核框架（六大板块）"><a href="#稽核框架（六大板块）" class="headerlink" title="稽核框架（六大板块）"></a>稽核框架（六大板块）</h2><ol><li>覆盖与容量</li></ol><ul><li>网关密度、频点复用、干扰与重选；</li><li>卫星补盲区域的链路预算与季节性变化；</li></ul><ol start="2"><li>质量与SLA</li></ol><ul><li>时延&#x2F;丢包&#x2F;可用性按业务分层：关键告警、运营数据、低价值自报；</li><li>SLA 违约记录与补救；</li></ul><ol start="3"><li>设备与电池</li></ol><ul><li>上报频率、唤醒策略、电池寿命模型；</li><li>固件 OTA 覆盖率、失败率与回滚；</li></ul><ol start="4"><li>安全与合规</li></ol><ul><li>端到端加密、密钥轮换、证书与设备溯源；</li><li>权限与租户隔离；</li></ul><ol start="5"><li>运营与工单</li></ol><ul><li>故障分布、平均修复时间（MTTR）、重复性缺陷；</li><li>工单到根因（网关&#x2F;回传&#x2F;平台&#x2F;设备）的闭环率；</li></ul><ol start="6"><li>费用与预算</li></ol><ul><li>设备 CAPEX、网关 OPEX、回传与平台费用；</li><li>分层计费与成本分摊；</li></ul><h2 id="改进清单（实例）"><a href="#改进清单（实例）" class="headerlink" title="改进清单（实例）"></a>改进清单（实例）</h2><ul><li>城市井盖&#x2F;消防场景：增设微小区&#x2F;定向天线，降低地下遮挡；</li><li>偏远农业灌溉：卫星补盲 + 边缘聚合，降低链路成本；</li><li>设备寿命：优化上报策略与事件聚合，延长 15% 电池寿命；</li><li>工单治理：引入“重复缺陷”自动归因与预防性维护。</li></ul><h2 id="指标看板"><a href="#指标看板" class="headerlink" title="指标看板"></a>指标看板</h2><ul><li>覆盖空洞热力图、SLA 违约数、工单闭环时长；</li><li>OTA 成功率、电池寿命预测偏差；</li><li>单设备&#x2F;单业务的成本曲线；</li><li>安全事件与密钥轮换达成率。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>IoT 的核心不是“接入越多越好”，而是“长期、低成本、可治理”。把稽核与 SLA 写入季度节奏，才能在多接入复杂度上稳住质量与预算。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>LoRa Alliance：TTI × Wien Energie（2025-10）、Türkiye 卫星 IoT 授权（2025-09）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;结合 10 月的 LoRa Alliance 动态（TTI × Wien Energie 本地化网络服务器）与 9 月底土耳其监管对 LEO</summary>
      
    
    
    
    <category term="物联网" scheme="https://zhangxianda.com/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="卫星物联网" scheme="https://zhangxianda.com/tags/%E5%8D%AB%E6%98%9F%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="LoRaWAN" scheme="https://zhangxianda.com/tags/LoRaWAN/"/>
    
    <category term="城市物联网" scheme="https://zhangxianda.com/tags/%E5%9F%8E%E5%B8%82%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="运维稽核" scheme="https://zhangxianda.com/tags/%E8%BF%90%E7%BB%B4%E7%A8%BD%E6%A0%B8/"/>
    
    <category term="SLA" scheme="https://zhangxianda.com/tags/SLA/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 软件工程：Rust docs.rs 默认目标变更的供应链启示（10/16 官方博文）</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-software-engineering-rust-docsrs-default-targets/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-software-engineering-rust-docsrs-default-targets/</id>
    <published>2025-10-20T02:55:00.000Z</published>
    <updated>2025-10-20T01:22:56.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>Rust 官方博客在 10&#x2F;16 发布“docs.rs: changed default targets”，将文档构建的默认目标做出调整。虽然这看似是“文档层”的微调，但对依赖 docs.rs 文档与示例构建的企业内部平台、离线镜像与 CI 有实打实影响。本文解读该变更背后的工程动机与供应链启示，并给出一次“文档供应链”的体检清单。</p><h2 id="变更动机与影响面"><a href="#变更动机与影响面" class="headerlink" title="变更动机与影响面"></a>变更动机与影响面</h2><ul><li>动机：<ul><li>降低构建成本与排队时间；</li><li>把“非主流&#x2F;高成本目标”的构建转为显式选择；</li></ul></li><li>影响面：<ul><li>文档示例在非默认目标下的构建行为变化；</li><li>企业内部“离线 docs”镜像的体积与同步策略；</li><li>CI 上以 docs 构建作为“轻量验证”的工作流。</li></ul></li></ul><h2 id="企业应该怎么做"><a href="#企业应该怎么做" class="headerlink" title="企业应该怎么做"></a>企业应该怎么做</h2><ol><li>盘点与对齐</li></ol><ul><li>盘点内部“文档消费”方式：在线阅读、离线镜像、在 IDE 中跳转、CI 里样例编译；</li><li>对齐默认目标变化：明确新增&#x2F;减少了哪些目标的 doc 构建；</li></ul><ol start="2"><li>调整 CI&#x2F;CD</li></ol><ul><li>把“示例构建”从默认目标解耦，按产品线选择目标列表；</li><li>对“跨平台 crates”构建 doc 的步骤进行矩阵化，避免隐藏失败；</li></ul><ol start="3"><li>离线镜像与缓存</li></ol><ul><li>调整离线镜像的抓取策略，减少存储与网络压力；</li><li>设定过期与刷新频率，保证工程师看到的是“可复现版本”的 doc；</li></ul><ol start="4"><li>开发者体验（DevEx）</li></ol><ul><li>IDE 插件&#x2F;Language Server 的跳转需适配 doc 目标变化；</li><li>文档中提供“目标选择指南”，减少初学者困惑。</li></ul><h2 id="供应链启示：文档也是“构建物”"><a href="#供应链启示：文档也是“构建物”" class="headerlink" title="供应链启示：文档也是“构建物”"></a>供应链启示：文档也是“构建物”</h2><ul><li>SBOM：将文档生成器与依赖计入 SBOM，确保来源与版本可追踪；</li><li>签名与镜像：对离线 doc 包进行签名与校验，避免篡改；</li><li>合规：面向客户交付的“开发包”中，明确 doc 的生成版本与目标列表。</li></ul><h2 id="度量与回归"><a href="#度量与回归" class="headerlink" title="度量与回归"></a>度量与回归</h2><ul><li>文档构建时长、失败率、缓存命中率；</li><li>工程师搜索&#x2F;跳转成功率与满意度；</li><li>离线镜像体积与同步时长；</li><li>兼容性问题单数量与关闭时长。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>“文档供应链”被忽视已久。借 10&#x2F;16 docs.rs 变更之机，做一次从目标、构建、镜像到消费端的体检，会让团队在“效率—成本—可控性”之间找到更好平衡。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Rust Blog：docs.rs: changed default targets（2025-10-16）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;Rust 官方博客在 10&amp;#x2F;16 发布“docs.rs: changed default targets”，将文档构建的默认目标做</summary>
      
    
    
    
    <category term="软件工程" scheme="https://zhangxianda.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="CI/CD" scheme="https://zhangxianda.com/tags/CI-CD/"/>
    
    <category term="Rust" scheme="https://zhangxianda.com/tags/Rust/"/>
    
    <category term="供应链" scheme="https://zhangxianda.com/tags/%E4%BE%9B%E5%BA%94%E9%93%BE/"/>
    
    <category term="docs.rs" scheme="https://zhangxianda.com/tags/docs-rs/"/>
    
    <category term="文档构建" scheme="https://zhangxianda.com/tags/%E6%96%87%E6%A1%A3%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 量子安全：混合 KEM 的生产硬化清单（TLS、PKI、设备固件）</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-quantum-pqc-hybrid-kem-hardening/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-quantum-pqc-hybrid-kem-hardening/</id>
    <published>2025-10-20T02:47:00.000Z</published>
    <updated>2025-10-20T01:22:40.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>NIST FIPS（ML-KEM&#x2F;ML-DSA&#x2F;SLH-DSA）确定后，云与浏览器逐步推进混合密钥交换。10&#x2F;20 的关键字是“硬化”：把实验性的混合握手、双签与证书替换，落到“可观测、可回退、可审计”的生产规则中。本文给出混合 KEM 的硬化清单，覆盖 TLS、PKI 与设备固件。</p><h2 id="TLS：从试点到稳定"><a href="#TLS：从试点到稳定" class="headerlink" title="TLS：从试点到稳定"></a>TLS：从试点到稳定</h2><ul><li>试点：在预发启用 ML-KEM ∥ ECDHE，测量握手大小&#x2F;延迟差异；</li><li>灰度：边缘&#x2F;移动优先做缓存&#x2F;会话复用，设置回退白名单；</li><li>互通：建立兼容矩阵（客户端&#x2F;代理&#x2F;负载均衡&#x2F;服务端），记录失败样本；</li><li>可观测：在日志与追踪中打点握手类型与失败原因，形成告警规则。</li></ul><h2 id="PKI：双签与替换"><a href="#PKI：双签与替换" class="headerlink" title="PKI：双签与替换"></a>PKI：双签与替换</h2><ul><li>代码&#x2F;固件：采用 ML-DSA&#x2F;SLH-DSA 与经典签名双签过渡；</li><li>证书：根&#x2F;中间&#x2F;叶子分阶段替换，CRL&#x2F;OCSP 监控与过期告警；</li><li>透明：证书透明度日志 + 时间戳服务，实现证据可追溯。</li></ul><h2 id="设备固件：从-Bootloader-开始"><a href="#设备固件：从-Bootloader-开始" class="headerlink" title="设备固件：从 Bootloader 开始"></a>设备固件：从 Bootloader 开始</h2><ul><li>Bootloader 支持新签名与密钥存储；</li><li>OTA：安全通道、签名验证与回滚；</li><li>资源受限：通过前置网关代理与分阶段替换降低一次性成本。</li></ul><h2 id="政策与流程"><a href="#政策与流程" class="headerlink" title="政策与流程"></a>政策与流程</h2><ul><li>策略：组织级“密码政策”将 PQC 纳入白名单与演进路线；</li><li>流程：在变更平台中把“混合握手&#x2F;双签&#x2F;证书替换”写成模板化工序；</li><li>审计：输出阶段性报告模板，面向客户与监管复用。</li></ul><h2 id="风险矩阵（示例）"><a href="#风险矩阵（示例）" class="headerlink" title="风险矩阵（示例）"></a>风险矩阵（示例）</h2><ul><li>性能：握手开销上升 → 缓存&#x2F;复用&#x2F;票据；</li><li>互通：实现差异 → 白名单&#x2F;灰度&#x2F;回退；</li><li>设备：存储&#x2F;算力不足 → 网关代理；</li><li>运营：证书替换 → 生命周期管理；</li><li>证据：材料缺失 → 过程留痕标准化。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>“先混合，再替换”是现实主义路线。把硬化步骤写进流水线，把可观测与回滚放进第一天，才能稳住兼容与性能之间的平衡。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;NIST FIPS（ML-KEM&amp;#x2F;ML-DSA&amp;#x2F;SLH-DSA）确定后，云与浏览器逐步推进混合密钥交换。10&amp;#x2F;</summary>
      
    
    
    
    <category term="量子计算" scheme="https://zhangxianda.com/categories/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="PQC" scheme="https://zhangxianda.com/tags/PQC/"/>
    
    <category term="设备固件" scheme="https://zhangxianda.com/tags/%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6/"/>
    
    <category term="合规证据" scheme="https://zhangxianda.com/tags/%E5%90%88%E8%A7%84%E8%AF%81%E6%8D%AE/"/>
    
    <category term="混合KEM" scheme="https://zhangxianda.com/tags/%E6%B7%B7%E5%90%88KEM/"/>
    
    <category term="TLS/PKI" scheme="https://zhangxianda.com/tags/TLS-PKI/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 Python 3.14 迁移终检：类型、更快构建与科学栈的协同升级</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-python-3-14-final-migration-checklist/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-python-3-14-final-migration-checklist/</id>
    <published>2025-10-20T02:40:00.000Z</published>
    <updated>2025-10-20T01:22:28.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>Python 官方 FTP 目录显示 3.14.0 在 10 月上旬已经就位，同期 3.13.9&#x2F;3.12.12 维护线更新。10&#x2F;20 建议各团队完成 3.14 的迁移终检：统一构建链、验证类型&#x2F;性能改动、与 SciPy 2.0 的模块化升级协同推进，把“版本升级”从一次行动变成“流水线能力”。</p><h2 id="迁移面（系统化梳理）"><a href="#迁移面（系统化梳理）" class="headerlink" title="迁移面（系统化梳理）"></a>迁移面（系统化梳理）</h2><ul><li>运行时：3.14.0 与目标维护线（3.13.9&#x2F;3.12.12）并行验证；</li><li>构建链：PEP 517&#x2F;518 构建后端、编译器版本、manylinux 轮子兼容；</li><li>科学栈：NumPy&#x2F;SciPy 2.0&#x2F;Numba&#x2F;Cython 与 BLAS&#x2F;LAPACK 后端（OpenBLAS&#x2F;oneMKL）；</li><li>容器：基础镜像统一、系统库与本地依赖一致；</li><li>观测：性能基线、内存&#x2F;线程、IO 行为。</li></ul><h2 id="重点检查项"><a href="#重点检查项" class="headerlink" title="重点检查项"></a>重点检查项</h2><ol><li>类型系统与诊断</li></ol><ul><li>更严格&#x2F;友好的错误信息有助于大型项目维护；</li><li>在 mypy&#x2F;pyright 上跑一次全量类型检查，清点新增&#x2F;变化告警；</li></ul><ol start="2"><li>性能与并发</li></ol><ul><li>解释器&#x2F;对象模型的微优化对延迟下降有帮助（以发布说明为准）；</li><li>GIL&#x2F;IO 调度对少数场景产生影响时，考虑多进程&#x2F;异步改造；</li></ul><ol start="3"><li>科学栈</li></ol><ul><li>SciPy 2.0 的模块化安装可显著缩小镜像；</li><li>OpenBLAS&#x2F;oneMKL 的后端选择与矢量化开关；</li><li>Cython&#x2F;Numba 的编译器与标志固化，避免“环境漂移”。</li></ul><h2 id="两套环境对照（建议）"><a href="#两套环境对照（建议）" class="headerlink" title="两套环境对照（建议）"></a>两套环境对照（建议）</h2><ul><li>A 线：3.13 稳定线 + 现有科学栈；</li><li>B 线：3.14 + SciPy 2.0 + 固化构建链；</li><li>指标：批处理窗口、在线服务 p95&#x2F;p99、内存占用、镜像体积；</li><li>验收：A&#x2F;B 差异 &lt; 5% 或解决策略明确。</li></ul><h2 id="供应链与合规"><a href="#供应链与合规" class="headerlink" title="供应链与合规"></a>供应链与合规</h2><ul><li>私有镜像与代理，避免外部供应链风险；</li><li>SBOM&#x2F;签名&#x2F;来源证明（SLSA&#x2F;Sigstore）；</li><li>许可证扫描与外发白名单；</li><li>证据：从构建到发布的“可复现记录”。</li></ul><h2 id="容器与部署建议"><a href="#容器与部署建议" class="headerlink" title="容器与部署建议"></a>容器与部署建议</h2><ul><li>只读根文件系统、非 root、seccomp&#x2F;AppArmor；</li><li>预热导入与 Lazy Import；</li><li>资源请求与 HPA；</li><li>热路径微基准（pytest-benchmark&#x2F;Airspeed Velocity）。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>3.14 的价值在于“稳态演进 + 科学栈现代化”。把迁移写入流水线，把证据放进看板，才能让“版本更新”成为持续的工程能力。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Python FTP：3.14.0（10 月上旬）、3.13.9&#x2F;3.12.12</li><li>SciPy 2.0 发布说明（2025-10-09）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;Python 官方 FTP 目录显示 3.14.0 在 10 月上旬已经就位，同期 3.13.9&amp;#x2F;3.12.12 维护线更新。10</summary>
      
    
    
    
    <category term="Python" scheme="https://zhangxianda.com/categories/Python/"/>
    
    
    <category term="科学计算" scheme="https://zhangxianda.com/tags/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
    <category term="维护版本" scheme="https://zhangxianda.com/tags/%E7%BB%B4%E6%8A%A4%E7%89%88%E6%9C%AC/"/>
    
    <category term="Python 3.14.0" scheme="https://zhangxianda.com/tags/Python-3-14-0/"/>
    
    <category term="兼容性" scheme="https://zhangxianda.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    <category term="构建链" scheme="https://zhangxianda.com/tags/%E6%9E%84%E5%BB%BA%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 Java 运维值班：10/21 Oracle CPU 发布前夜的“终检与回滚表”</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-java-oct21-cpu-runbook/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-java-oct21-cpu-runbook/</id>
    <published>2025-10-20T02:33:00.000Z</published>
    <updated>2025-10-20T01:22:11.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>Oracle 的 10 月季度 CPU 通常在第三个周二发布（2025 年为 10&#x2F;21），10&#x2F;20 作为“前夜”，是完成“终检—预热—回滚表”的关键窗口。本文给出一份值班 Runbook：如何在不打扰业务的前提下，把风险压缩到最小，把证据留得最全。</p><h2 id="终检清单（当晚-21-00-前完成）"><a href="#终检清单（当晚-21-00-前完成）" class="headerlink" title="终检清单（当晚 21:00 前完成）"></a>终检清单（当晚 21:00 前完成）</h2><ul><li>版本矩阵：<ul><li>运行时：25 LTS 为主线、21&#x2F;17 LTS 同步；</li><li>构建链：CI 使用的 JDK 版本与生产一致；</li><li>容器镜像：基础镜像与系统库（glibc&#x2F;musl）对齐；</li></ul></li><li>兼容性：<ul><li>反射&#x2F;模块&#x2F;序列化路径；</li><li>TLS&#x2F;证书链&#x2F;混合 KEM 互通与回退；</li><li>数据库驱动&#x2F;HTTP 客户端；</li></ul></li><li>基线与探针：<ul><li>P95&#x2F;P99&#x2F;GC 停顿&#x2F;CPU&#x2F;内存基线；</li><li>健康探针与关键交易路径探针就绪。</li></ul></li></ul><h2 id="发布当晚（10-21）操作节奏"><a href="#发布当晚（10-21）操作节奏" class="headerlink" title="发布当晚（10&#x2F;21）操作节奏"></a>发布当晚（10&#x2F;21）操作节奏</h2><ol><li>获取与封板</li></ol><ul><li>从发行版（Temurin 等）获取相应 JDK 构建，生成 SBOM 与签名记录；</li><li>在构建仓与镜像仓“封板”留档，避免误替换；</li></ul><ol start="2"><li>预发与金丝雀</li></ol><ul><li>预发集群替换并跑回归套件；</li><li>金丝雀 5%–10% 流量引入，设置错误&#x2F;延迟&#x2F;GC 异常阈值；</li></ul><ol start="3"><li>可观测与报警</li></ol><ul><li>在 OTel&#x2F;Prometheus 面板对比“升级前&#x2F;后”指标；</li><li>对异常设置冷却时间与自动回退钩子。</li></ul><h2 id="回滚表（紧急场景）"><a href="#回滚表（紧急场景）" class="headerlink" title="回滚表（紧急场景）"></a>回滚表（紧急场景）</h2><ul><li>一键回退：镜像标签&#x2F;版本指纹已准备；</li><li>功能开关：降级非关键 TLS 套件或关闭新特性；</li><li>旁路：对外端点临时加固（WAF&#x2F;速率限制）；</li><li>通知：变更与回退在工单&#x2F;IM 同步，写明影响范围与窗口。</li></ul><h2 id="合规与证据"><a href="#合规与证据" class="headerlink" title="合规与证据"></a>合规与证据</h2><ul><li>证据链：CVE–资产–变更–预发–金丝雀–探针–回滚预案；</li><li>签名与溯源：制品与镜像签名，外部供应链来源证明（SLSA&#x2F;Sigstore）。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>良好的前夜准备不是“神操作”，而是“把每一个环节写清楚、演一次”。留足回滚时间与证据，才是对稳定性的最大尊重。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;Oracle 的 10 月季度 CPU 通常在第三个周二发布（2025 年为 10&amp;#x2F;21），10&amp;#x2F;20 作为“前夜”，是</summary>
      
    
    
    
    <category term="Java" scheme="https://zhangxianda.com/categories/Java/"/>
    
    
    <category term="Oracle CPU" scheme="https://zhangxianda.com/tags/Oracle-CPU/"/>
    
    <category term="Temurin 25 LTS" scheme="https://zhangxianda.com/tags/Temurin-25-LTS/"/>
    
    <category term="兼容性" scheme="https://zhangxianda.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    <category term="运行时升级" scheme="https://zhangxianda.com/tags/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8D%87%E7%BA%A7/"/>
    
    <category term="回滚策略" scheme="https://zhangxianda.com/tags/%E5%9B%9E%E6%BB%9A%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 数字治理：平台水印/指纹与权利人接口的“工程答案”</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-digital-governance-platform-watermark-interfaces/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-digital-governance-platform-watermark-interfaces/</id>
    <published>2025-10-20T02:25:00.000Z</published>
    <updated>2025-10-20T01:21:51.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>10 月上中旬，多家平台更新了系统卡&#x2F;安全白皮书与合规说明，围绕生成式视频&#x2F;音频的稳健水印、内容指纹与权利人接口持续加码。站在 10&#x2F;20 的“周一”节点，企业与平台更需要一份“工程答案”：如何把“标识—验证—处置—分润”做成可复用的流水线，而不是零散的手工流程。</p><h2 id="设计目标（四层）"><a href="#设计目标（四层）" class="headerlink" title="设计目标（四层）"></a>设计目标（四层）</h2><ul><li>生成层：在生成端嵌入稳健水印（音轨&#x2F;画面&#x2F;元数据），生成“来源凭证”；</li><li>传输层：在转码&#x2F;剪辑&#x2F;分发链路保留标识，降低“破坏性处理”；</li><li>分发层：提供公开校验 API、展示内容凭证，并接入权利人接口；</li><li>处置层：高优先级通道（举报→冻结→下架→上报）的 SLA 与证据留痕。</li></ul><h2 id="权利人接口：从“下架”到“协作”"><a href="#权利人接口：从“下架”到“协作”" class="headerlink" title="权利人接口：从“下架”到“协作”"></a>权利人接口：从“下架”到“协作”</h2><ul><li>查询：按角色&#x2F;风格&#x2F;片段指纹检索疑似内容；</li><li>下架：定义“证据充分→紧急处置”通道与时限；</li><li>分润：对授权内容提供收益分配方案（平台对账与结算 API）；</li><li>白&#x2F;灰&#x2F;黑名单：<ul><li>黑名单：不可生成；</li><li>白名单：授权生成；</li><li>灰名单：需二次授权、提示强化与人审。</li></ul></li></ul><h2 id="工程流水线（参考实现）"><a href="#工程流水线（参考实现）" class="headerlink" title="工程流水线（参考实现）"></a>工程流水线（参考实现）</h2><ul><li>生成：Sora 2 等模型在导出时注入稳健水印，并生成“内容凭证包”（签名、时间戳、哈希、资产引用）；</li><li>校验：分发平台对上传&#x2F;转发内容运行指纹匹配&#x2F;水印校验，提供公共校验端点；</li><li>存证：把凭证包与处置日志入库（WORM&#x2F;合规存储），方便跨法域举证；</li><li>处置：权利人 API 驱动流程，平台按工单系统化执行；</li><li>公示：在详情页展示“凭证可用”与权利状态，提升透明度。</li></ul><h2 id="企业接入：从-DAM-到合规运维"><a href="#企业接入：从-DAM-到合规运维" class="headerlink" title="企业接入：从 DAM 到合规运维"></a>企业接入：从 DAM 到合规运维</h2><ul><li>资产管理（DAM）：为角色&#x2F;道具&#x2F;音乐等素材管理权属、许可、到期提醒；</li><li>工作流：将分镜、生成、审核、发布、复用并入同一平台；</li><li>合规运维：<ul><li>周期性自查与抽样校验；</li><li>对“失败校验&#x2F;缺失凭证”的内容进行回滚与替换；</li><li>输出对外“合规白皮书”。</li></ul></li></ul><h2 id="指标看板与-SLA"><a href="#指标看板与-SLA" class="headerlink" title="指标看板与 SLA"></a>指标看板与 SLA</h2><ul><li>水印校验通过率、指纹命中率、误报&#x2F;漏报；</li><li>权利人请求的平均响应时间与下架时延；</li><li>授权内容的收益分配准确率与争议率；</li><li>违规处置的复核通过率与复发率。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>治理的难点不在“有无技术”，而在“工程化”。当水印&#x2F;指纹&#x2F;权利人接口与平台工作流融为一体，生成式内容的合规就从“被动应对”变成“积极协作”。这是一条需要产品、工程、法务与合作方共同推动的长期路线。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;10 月上中旬，多家平台更新了系统卡&amp;#x2F;安全白皮书与合规说明，围绕生成式视频&amp;#x2F;音频的稳健水印、内容指纹与权利人接口持续加码</summary>
      
    
    
    
    <category term="数字治理" scheme="https://zhangxianda.com/categories/%E6%95%B0%E5%AD%97%E6%B2%BB%E7%90%86/"/>
    
    
    <category term="平台治理" scheme="https://zhangxianda.com/tags/%E5%B9%B3%E5%8F%B0%E6%B2%BB%E7%90%86/"/>
    
    <category term="生成式内容" scheme="https://zhangxianda.com/tags/%E7%94%9F%E6%88%90%E5%BC%8F%E5%86%85%E5%AE%B9/"/>
    
    <category term="水印与指纹" scheme="https://zhangxianda.com/tags/%E6%B0%B4%E5%8D%B0%E4%B8%8E%E6%8C%87%E7%BA%B9/"/>
    
    <category term="权利人接口" scheme="https://zhangxianda.com/tags/%E6%9D%83%E5%88%A9%E4%BA%BA%E6%8E%A5%E5%8F%A3/"/>
    
    <category term="合规工程" scheme="https://zhangxianda.com/tags/%E5%90%88%E8%A7%84%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 安全执行日志：补丁星期二后一周的“第七日验收”与 KEV 倒计时</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-cybersecurity-oct-window-20th/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-cybersecurity-oct-window-20th/</id>
    <published>2025-10-20T02:16:00.000Z</published>
    <updated>2025-10-20T01:21:33.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>10 月 14 日补丁星期二过去一周，CISA KEV 在 10-14&#x2F;15 连续纳入多条在野利用漏洞，多个条目“Due Date”指向 10 月底&#x2F;11 月初。10 月 20 日这一天，是多数企业“首周行动”的第七日，应进入“验收与复核”的阶段：确认补丁真实性与有效性、确认缓解措施仍在位、确认未修复资产已经隔离，补全证据链并准备最终周报。本文给出第七日（D+7）的验收清单与常见回退处置。</p><h2 id="D-7-验收清单"><a href="#D-7-验收清单" class="headerlink" title="D+7 验收清单"></a>D+7 验收清单</h2><ol><li>技术验证</li></ol><ul><li>核查高优先级 CVE 的补丁指纹（版本、文件哈希、注册表&#x2F;构件签名）；</li><li>对外暴露端点的 WAF&#x2F;IPS 规则仍然命中（临时缓解未被误删）；</li><li>关键服务的端到端探针（健康度&#x2F;交易路径）无退化；</li><li>日志湖&#x2F;EDR 中与相关 IOC 的告警下降趋势明显。</li></ul><ol start="2"><li>资产与隔离</li></ol><ul><li>影子资产&#x2F;EASM 巡检：是否仍有未登记端点暴露；</li><li>长尾系统：按“不可修复&#x2F;需替换”的分类进入隔离清单；</li><li>租户与协作平台：外分享与第三方 OAuth 应用的权限回收。</li></ul><ol start="3"><li>证据链与可观测</li></ol><ul><li>形成“CVE → 受影响资产 → 变更单 → 预发验证 → 灰度上线 → 探针通过 → 回滚预案”的完整链路；</li><li>在 SIEM 中建立“变更事件 → 指标与告警”的映射，便于事后审计与溯源。</li></ul><h2 id="红蓝对抗：空窗期演练与防线加固"><a href="#红蓝对抗：空窗期演练与防线加固" class="headerlink" title="红蓝对抗：空窗期演练与防线加固"></a>红蓝对抗：空窗期演练与防线加固</h2><ul><li>红队：在“补丁空窗期”与“配置变更后”的 72 小时内，模拟跨租户绕过、插件投毒、社会工程结合凭据窃取；</li><li>蓝队：对“变更 24 小时”与“变更 72 小时”做自动复核，验证端点&#x2F;规则&#x2F;账户回收是否仍在位。</li></ul><h2 id="回退策略（若业务退化或兼容失败）"><a href="#回退策略（若业务退化或兼容失败）" class="headerlink" title="回退策略（若业务退化或兼容失败）"></a>回退策略（若业务退化或兼容失败）</h2><ul><li>金丝雀回退：保留上一版本镜像与配置，命中阈值时自动回退；</li><li>功能开关：对风险功能临时关闭或限制；</li><li>旁路防护：在回退期间加强 WAF&#x2F;速率限制与访问审计；</li><li>沟通与通告：在内部 IM 与工单系统发出影响范围与时间窗口。</li></ul><h2 id="指标看板（建议）"><a href="#指标看板（建议）" class="headerlink" title="指标看板（建议）"></a>指标看板（建议）</h2><ul><li>“从 KEV 纳入到缓解完成”的平均时长；</li><li>修复覆盖率与失败率；</li><li>“回退次数&#x2F;因回退引发的额外告警”；</li><li>曝光面收敛（影子资产数下降）。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>补丁行动的价值不在“打了多少补丁”，而在“能否稳定关闭可利用面”。在 10&#x2F;20 这个节点，完成第七日的验收与复核，为月底的合规审计与外部问询准备好“可验证”的答案。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>CISA KEV 目录（含 2025-10-14&#x2F;15 新增与 Due Date 信息）</li><li>厂商公告：微软 10 月补丁与 Oracle 10 月 CPU 预告</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;10 月 14 日补丁星期二过去一周，CISA KEV 在 10-14&amp;#x2F;15 连续纳入多条在野利用漏洞，多个条目“Due Date</summary>
      
    
    
    
    <category term="网络安全" scheme="https://zhangxianda.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="CISA KEV" scheme="https://zhangxianda.com/tags/CISA-KEV/"/>
    
    <category term="Patch Tuesday" scheme="https://zhangxianda.com/tags/Patch-Tuesday/"/>
    
    <category term="72小时窗口" scheme="https://zhangxianda.com/tags/72%E5%B0%8F%E6%97%B6%E7%AA%97%E5%8F%A3/"/>
    
    <category term="验收回归" scheme="https://zhangxianda.com/tags/%E9%AA%8C%E6%94%B6%E5%9B%9E%E5%BD%92/"/>
    
    <category term="证据链" scheme="https://zhangxianda.com/tags/%E8%AF%81%E6%8D%AE%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-20 人工智能观察：企业级 AI 代理平台的三把“扳手”——MCP、上下文工程与安全边界</title>
    <link href="https://zhangxianda.com/2025/10/20/2025-10-20-ai-agents-mcp-enterprise-2025/"/>
    <id>https://zhangxianda.com/2025/10/20/2025-10-20-ai-agents-mcp-enterprise-2025/</id>
    <published>2025-10-20T02:08:00.000Z</published>
    <updated>2025-10-20T01:21:13.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>过去一周，GitHub Blog 推出“9 个开源 AI 与 MCP 项目”的专题（10-17），延续了本月关于 Copilot&#x2F;Agentic 工作流的密集讨论。站在 10 月 20 日这一刻，企业级 AI 落地的焦点已从“模型选型”转向“连接—约束—验证”：</p><ul><li>连接：如何以 MCP（Model Context Protocol&#x2F;Platform 类型生态）将知识、工具、权限编织为可编排的能力网络；</li><li>约束：如何以上下文工程与策略模板控制提示质量与行为边界；</li><li>验证：如何在生产环境内“可观测、可回滚、可审计”，把智能化转化为可控的工程收益。</li></ul><p>本文在当周锚点的基础上，总结企业搭建“AI 代理平台”的三把扳手，并给出两周级的落地手册与度量体系。</p><h2 id="扳手一：MCP-把“知识—工具—身份”结构化"><a href="#扳手一：MCP-把“知识—工具—身份”结构化" class="headerlink" title="扳手一：MCP 把“知识—工具—身份”结构化"></a>扳手一：MCP 把“知识—工具—身份”结构化</h2><ul><li>目录与发现：以 Registry 形式登记企业常用工具（工单、CI&#x2F;CD、监控、知识库、数据湖查询、费用看板），并以标签（域、风险级别、所有者）管理；</li><li>接入模式：将工具封装为“受限调用”接口，限定参数、数据范围与速率；对需要长期状态的能力（如检索）设计幂等与缓存策略；</li><li>身份与作用域：代理使用短期令牌，令牌与工具作用域“强绑定”；高危工具（删除&#x2F;发布）必须二次审批或多因子确认；</li><li>审计：所有工具调用与外发（到第三方模型&#x2F;服务）均进日志湖并携带 request-id&#x2F;trace-id 以便追踪。</li></ul><h2 id="扳手二：上下文工程把“事实”排在“语言技巧”之前"><a href="#扳手二：上下文工程把“事实”排在“语言技巧”之前" class="headerlink" title="扳手二：上下文工程把“事实”排在“语言技巧”之前"></a>扳手二：上下文工程把“事实”排在“语言技巧”之前</h2><ul><li>语义检索：构建多源索引（代码、ADR、Runbook、API 文档、常见告警、工单记录），按“真值来源优先级”合并；</li><li>模板化系统提示：抽象角色、风格、合规与安全红线，形成“可继承”的模版；</li><li>结构化输出：鼓励以 JSON&#x2F;YAML 等结构化方案输出，便于管道消费；</li><li>负载裁剪：对上下文做“最小必要”裁剪，优先事实、禁用花哨；</li><li>质量闸：引入自动化校验（schema 校验、lint、事实比对），将失败用例沉淀为“负样本库”。</li></ul><h2 id="扳手三：安全边界让“能做”先服从“该做”"><a href="#扳手三：安全边界让“能做”先服从“该做”" class="headerlink" title="扳手三：安全边界让“能做”先服从“该做”"></a>扳手三：安全边界让“能做”先服从“该做”</h2><ul><li>目录&#x2F;文件系统：限定代理可写目录，禁用全盘扫描；</li><li>网络：默认拒绝外网访问，按白名单开通域名与端口；</li><li>命令：可执行命令白名单，危险命令（删除、替换、关机）需二次确认或模拟运行；</li><li>数据：对敏感字段做策略脱敏，建立“敏感触发器”直接 fail；</li><li>变更：代理生成的 PR 强制签名与额外评审通道，CI 流水线内启用 SBOM 与许可证扫描。</li></ul><h2 id="两周落地手册（10-20—11-03）"><a href="#两周落地手册（10-20—11-03）" class="headerlink" title="两周落地手册（10&#x2F;20—11&#x2F;03）"></a>两周落地手册（10&#x2F;20—11&#x2F;03）</h2><p>第 1 周：骨架搭建</p><ul><li>Registry：登记 10–20 个关键工具与知识库索引；</li><li>安全基线：完成目录&#x2F;网络&#x2F;命令白名单与令牌作用域划分；</li><li>模板：沉淀 10 个系统提示模板（代码修改、单测补全、日志解读、Runbook 执行、接口说明）；</li><li>可观测：将代理行为纳入指标&#x2F;日志&#x2F;追踪（OTel），串起“意图—工具—结果”。</li></ul><p>第 2 周：小闭环与评估</p><ul><li>选 2 条价值链路（如“构建失败→诊断→修复 PR”“告警→Runbook 执行→回执”）做金丝雀；</li><li>设立回退阈值（失败率、p99、审阅拒绝率）与止损脚本；</li><li>输出度量：交付周期（Lead Time）、变更失败率（CFR）、$cost&#x2F;token、代理参与 PR 的合并率&#x2F;回滚率、越权尝试事件数。</li></ul><h2 id="典型坑与纠偏"><a href="#典型坑与纠偏" class="headerlink" title="典型坑与纠偏"></a>典型坑与纠偏</h2><ul><li>错把 MCP 当“插件市场”：未做权限&#x2F;速率&#x2F;数据边界；</li><li>上下文“拼凑主义”：引入未经校验的外部资料，事实错误放大；</li><li>全面放开外发：无脱敏与审批，泄露风险陡升；</li><li>无度量：无法回答“代理是否真的节省了成本&#x2F;时间”。</li></ul><h2 id="成本与可用性：CPU-GPU-分层的现实主义"><a href="#成本与可用性：CPU-GPU-分层的现实主义" class="headerlink" title="成本与可用性：CPU&#x2F;GPU 分层的现实主义"></a>成本与可用性：CPU&#x2F;GPU 分层的现实主义</h2><ul><li>结合当周 Hugging Face × Intel 在 Google Cloud C4 的实践（10-15&#x2F;16），用 CPU 承载中等延迟&#x2F;中小模型与批处理，GPU 承载低延迟&#x2F;大模型；</li><li>将 tokens&#x2F;s、p95&#x2F;p99、$cost&#x2F;token 纳入 FinOps，看板化与策略化（降精度、降级模型、限流）。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>企业级 AI 的门槛不在“多大模型”，而在“工程秩序”。以 MCP 打通连通性，以上下文工程提高可靠性，以安全边界压住风险，再用可观测与度量把收益量化，智能化才能从 Demo 走向生产。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>GitHub Blog：Accelerate developer productivity with these 9 open source AI and MCP projects（2025-10-17）</li><li>Hugging Face Blog × Intel（2025-10-15&#x2F;16，C4 上的 GPT&#x2F;VLM 推理）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;过去一周，GitHub Blog 推出“9 个开源 AI 与 MCP 项目”的专题（10-17），延续了本月关于 Copilot&amp;#x2F;</summary>
      
    
    
    
    <category term="人工智能" scheme="https://zhangxianda.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="MCP" scheme="https://zhangxianda.com/tags/MCP/"/>
    
    <category term="AI Agents" scheme="https://zhangxianda.com/tags/AI-Agents/"/>
    
    <category term="企业平台" scheme="https://zhangxianda.com/tags/%E4%BC%81%E4%B8%9A%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="上下文工程" scheme="https://zhangxianda.com/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="安全合规" scheme="https://zhangxianda.com/tags/%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 后端可观测实践：OpenTelemetry 一体化落地的 8 项原则</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-backend-observability-otel-2025-playbook/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-backend-observability-otel-2025-playbook/</id>
    <published>2025-10-19T03:18:00.000Z</published>
    <updated>2025-10-20T00:49:57.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>在 React&#x2F;Compiler、PostgreSQL 18、云原生边缘计算等多线演进背景下，后端可观测是“共同底座”。OpenTelemetry（OTel）成为事实标准，但真正的一体化落地远不止“装个 SDK”。本文给出 2025 年可观测落地的 8 项原则与工程清单。</p><h2 id="八项原则"><a href="#八项原则" class="headerlink" title="八项原则"></a>八项原则</h2><ol><li>一体化：Trace&#x2F;Metric&#x2F;Log 三位一体，语义一致；</li><li>以 SLO 为锚：把可观测与用户体验挂钩（INP、延迟、错误率、可用性）；</li><li>低侵入：SDK&#x2F;自动注入&#x2F;Sidecar 结合，降低改造成本；</li><li>采样与成本：动态采样、采集过滤、保留策略；</li><li>统一标识：TraceID&#x2F;SpanID 贯通到日志与指标；</li><li>数据质量：字段规范、标签治理与卡片化展示；</li><li>事故闭环：从告警到事后复盘（Root Cause + Runbook）；</li><li>开放生态：标准协议与可替换后端，避免锁定。</li></ol><h2 id="工程清单"><a href="#工程清单" class="headerlink" title="工程清单"></a>工程清单</h2><ul><li>SDK：语言栈统一版本、自动注入优先；</li><li>网关：OTLP 收敛、限流与脱敏；</li><li>标签：服务&#x2F;版本&#x2F;环境&#x2F;区域统一命名；</li><li>SLO：定义服务 SLI 与目标，接入预算与告警；</li><li>存储：冷热分层与生命周期；</li><li>可视化：从“跨层级视图”直达“问题工单”；</li><li>变更挂钩：把发布&#x2F;配置变更打点进追踪；</li><li>训练与文化：让开发者以 Span 视角思考问题。</li></ul><h2 id="采样与告警设计（实践要点）"><a href="#采样与告警设计（实践要点）" class="headerlink" title="采样与告警设计（实践要点）"></a>采样与告警设计（实践要点）</h2><ul><li>采样：基于错误&#x2F;延迟的动态提高采样率；</li><li>告警：以 SLO 为锚，避免“阈值型噪声”，引入冷却时间与聚合；</li><li>演练：季度级“可观测演习”，验证链路完整与 Runbook 有效。</li></ul><h2 id="反模式（摘录）"><a href="#反模式（摘录）" class="headerlink" title="反模式（摘录）"></a>反模式（摘录）</h2><ul><li>只接 Trace 不做指标与日志贯通；</li><li>标签任意扩散，导致成本飙升与查询困难；</li><li>告警泛滥，值班疲劳；</li><li>把 OTel 当“打点工具”，忽视团队文化与流程。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>OTel 不是工具，是“度量语言”。当可观测以 SLO 与工程术语表达，后端的复杂性就被压到可控范围之内。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>OpenTelemetry 官方文档与社区实践（2025）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;在 React&amp;#x2F;Compiler、PostgreSQL 18、云原生边缘计算等多线演进背景下，后端可观测是“共同底座”。OpenT</summary>
      
    
    
    
    <category term="后端" scheme="https://zhangxianda.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="SLO" scheme="https://zhangxianda.com/tags/SLO/"/>
    
    <category term="可观测" scheme="https://zhangxianda.com/tags/%E5%8F%AF%E8%A7%82%E6%B5%8B/"/>
    
    <category term="OpenTelemetry" scheme="https://zhangxianda.com/tags/OpenTelemetry/"/>
    
    <category term="指标/日志/追踪" scheme="https://zhangxianda.com/tags/%E6%8C%87%E6%A0%87-%E6%97%A5%E5%BF%97-%E8%BF%BD%E8%B8%AA/"/>
    
    <category term="事故回溯" scheme="https://zhangxianda.com/tags/%E4%BA%8B%E6%95%85%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 前端实践：React Compiler 采纳中的 12 个反模式与校验清单</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-frontend-react-compiler-anti-patterns/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-frontend-react-compiler-anti-patterns/</id>
    <published>2025-10-19T03:10:00.000Z</published>
    <updated>2025-10-20T00:49:50.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>React 在 10 月发布 Compiler v1.0 稳定版，并在 19.2 中补齐多项能力（Activity、Performance Tracks、useEffectEvent）。然而，编译器不是“魔法棒”。本文总结 12 个常见反模式，并提供“开启前—运行中—回退后”的工程校验清单，帮助团队安全落地。</p><h2 id="常见反模式（12-条）"><a href="#常见反模式（12-条）" class="headerlink" title="常见反模式（12 条）"></a>常见反模式（12 条）</h2><ol><li>以为“所有重渲染都有害”：忽视必要重渲染，过度追求“零重渲染”。</li><li>动态可变引用充斥：频繁创建匿名函数&#x2F;对象，破坏稳定性假设。</li><li>复杂副作用塞进 useEffect：忽略 useEffectEvent，把事件处理与副作用混在一起。</li><li>不可预测的外部可变状态：全局单例&#x2F;可变模块状态，编译器难以正确优化。</li><li>巨石组件：容器&#x2F;展示未分离，难以识别稳定边界。</li><li>过度依赖第三方可变库：拖拽&#x2F;图形库的可变引用无隔离。</li><li>无性能基线：不做 Profiler&#x2F;INP 基线，收益无法验证。</li><li>CSS&#x2F;动画引入布局抖动：误将渲染抖动归咎编译器。</li><li>SSR&#x2F;RSC 时序未校验：数据获取与边界条件未测试。</li><li>忽视错误边界：无法定位优化后的异常路径。</li><li>构建链版本错配：编译插件&#x2F;类型定义不一致。</li><li>无回滚：开启范围扩大而无回退策略。</li></ol><h2 id="工程校验清单"><a href="#工程校验清单" class="headerlink" title="工程校验清单"></a>工程校验清单</h2><ul><li>启用前：<ul><li>基线：web-vitals、React Profiler；</li><li>规范：副作用归位、稳定引用、不可变数据；</li><li>构建：Compiler 插件版本与 React 版本对齐；</li></ul></li><li>运行中：<ul><li>金丝雀：从高收益页面开始；</li><li>可观测：INP&#x2F;渲染次数、内存；</li><li>风险：SSR&#x2F;RSC 时序与第三方可变库隔离；</li></ul></li><li>回退与复盘：<ul><li>回退阈值（INP&#x2F;错误率）；</li><li>记录“配置 → 指标变化”的因果；</li><li>输出规范增补。</li></ul></li></ul><h2 id="案例与对比（思路）"><a href="#案例与对比（思路）" class="headerlink" title="案例与对比（思路）"></a>案例与对比（思路）</h2><ul><li>高频表格：采用稳定引用 + 分段渲染，Compiler 开启后渲染次数下降 30%+；</li><li>富交互画布：第三方可变库隔离，避免优化失效；</li><li>表单场景：useEffectEvent 重构副作用，减少依赖数组复杂度与误触发。</li></ul><h2 id="团队规范模板（要点）"><a href="#团队规范模板（要点）" class="headerlink" title="团队规范模板（要点）"></a>团队规范模板（要点）</h2><ul><li>副作用分类与边界；</li><li>稳定引用与不可变数据约束；</li><li>组件拆分策略（容器&#x2F;展示&#x2F;控制）；</li><li>性能预算（渲染预算&#x2F;INP）与监控面板。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Compiler 的价值在于“自动把简单事做对”，但复杂性的边界仍在团队的工程实践中。以规范与观测为锚，才能把“性能红利”稳定转化为“用户体验与维护成本”的双赢。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>React 19.2、Compiler v1.0、React Conf 2025 Recap（官方博客 10 月）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;React 在 10 月发布 Compiler v1.0 稳定版，并在 19.2 中补齐多项能力（Activity、Performance </summary>
      
    
    
    
    <category term="前端" scheme="https://zhangxianda.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="性能优化" scheme="https://zhangxianda.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="React Compiler" scheme="https://zhangxianda.com/tags/React-Compiler/"/>
    
    <category term="可观测" scheme="https://zhangxianda.com/tags/%E5%8F%AF%E8%A7%82%E6%B5%8B/"/>
    
    <category term="React 19" scheme="https://zhangxianda.com/tags/React-19/"/>
    
    <category term="工程规范" scheme="https://zhangxianda.com/tags/%E5%B7%A5%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 物联网架构记：LoRaWAN × 卫星物联网的城市级融合路线</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-iot-satellite-lorawan-city-architecture/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-iot-satellite-lorawan-city-architecture/</id>
    <published>2025-10-19T03:02:00.000Z</published>
    <updated>2025-10-20T00:49:42.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>10 月 LoRa Alliance 新闻页出现 TTI × Wien Energie 的本地化 LoRaWAN 网络服务器案例，9 月下旬还有土耳其对 LEO 卫星物联网服务的授权消息。城市级 IoT 的架构从“单接入”走向“多接入”：LoRaWAN 负责城域广覆盖与低功耗，LEO 卫星负责偏远&#x2F;跨境&#x2F;移动补盲。本文给出一份“城市级融合架构”的蓝图与工程清单。</p><h2 id="融合架构三层"><a href="#融合架构三层" class="headerlink" title="融合架构三层"></a>融合架构三层</h2><ol><li>接入层：LoRaWAN + 卫星 + 蜂窝</li></ol><ul><li>LoRaWAN：计量&#x2F;环境&#x2F;设施；</li><li>卫星：远郊&#x2F;跨境&#x2F;海上移动；</li><li>蜂窝：高带宽&#x2F;低时延场景；</li></ul><ol start="2"><li>平台层：Network&#x2F;Join Server + 多接入路由 + 多租户 + 安全</li></ol><ul><li>多接入策略：按业务优先级与费用路由消息；</li><li>安全：端到端加密、密钥轮换、证书与设备溯源；</li></ul><ol start="3"><li>运营层：设备生命周期 + 告警&#x2F;工单 + 计费</li></ol><ul><li>电池寿命模型、异常检测、覆盖热力图；</li><li>SCADA&#x2F;EMS&#x2F;DMS 集成与工单闭环。</li></ul><h2 id="城市场景拼图"><a href="#城市场景拼图" class="headerlink" title="城市场景拼图"></a>城市场景拼图</h2><ul><li>能源&#x2F;水务&#x2F;供热&#x2F;路灯&#x2F;停车&#x2F;井盖&#x2F;垃圾桶&#x2F;电梯安全&#x2F;消防；</li><li>农林牧渔与地灾监测的卫星补盲；</li><li>统一资产标识与数据治理（隐私与合规）。</li></ul><h2 id="工程清单"><a href="#工程清单" class="headerlink" title="工程清单"></a>工程清单</h2><ul><li>规划：网关密度&#x2F;频点复用&#x2F;干扰评估；</li><li>平台：ADR 策略、下行调度、密钥管理与多租户隔离；</li><li>安全：端到端加密、供应链签名与固件 OTA；</li><li>运营：电池&#x2F;离线&#x2F;漂移告警与工单联动；</li><li>数据：质量、共享与二次开发接口。</li></ul><h2 id="经济模型与-SLA（建议）"><a href="#经济模型与-SLA（建议）" class="headerlink" title="经济模型与 SLA（建议）"></a>经济模型与 SLA（建议）</h2><ul><li>经济性：设备 CAPEX、网关 OPEX、回传链路与平台费用；</li><li>SLA：时延&#x2F;丢包&#x2F;可用性&#x2F;修复时间（MTTR）；</li><li>电池寿命：按业务周期与上报频率估算与校准；</li><li>业务分层：关键告警与低价值信息分级路由，控制总成本。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>城市级 IoT 的关键词不是“连上”，而是“长期、低成本、可治理”。LoRaWAN × 卫星的多接入融合，是 2025–2027 的主旋律。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>LoRa Alliance：TTI × Wien Energie（2025-10）与 Türkiye 卫星 IoT 授权（2025-09）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;10 月 LoRa Alliance 新闻页出现 TTI × Wien Energie 的本地化 LoRaWAN 网络服务器案例，9 月下旬</summary>
      
    
    
    
    <category term="物联网" scheme="https://zhangxianda.com/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="卫星物联网" scheme="https://zhangxianda.com/tags/%E5%8D%AB%E6%98%9F%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="平台化" scheme="https://zhangxianda.com/tags/%E5%B9%B3%E5%8F%B0%E5%8C%96/"/>
    
    <category term="LoRaWAN" scheme="https://zhangxianda.com/tags/LoRaWAN/"/>
    
    <category term="公用事业" scheme="https://zhangxianda.com/tags/%E5%85%AC%E7%94%A8%E4%BA%8B%E4%B8%9A/"/>
    
    <category term="城市物联网" scheme="https://zhangxianda.com/tags/%E5%9F%8E%E5%B8%82%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 软件工程实战：MCP Registry + Agentic 工作流的五级成熟度模型</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-software-engineering-mcp-registry-workflows/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-software-engineering-mcp-registry-workflows/</id>
    <published>2025-10-19T02:55:00.000Z</published>
    <updated>2025-10-20T00:49:36.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>结合 GitHub 博客 10 月 17 日“开源 AI 与 MCP 项目”推荐与一周内的 Copilot&#x2F;agents 系列文章，可以提炼出一个对工程团队极具可操作性的“五级成熟度模型”：从“个人增强”到“流水线级代理”，每一级都对应明确的能力、工具与安全&#x2F;合规基线。本文给出对照清单与落地路径。</p><h2 id="成熟度分级"><a href="#成熟度分级" class="headerlink" title="成熟度分级"></a>成熟度分级</h2><ol><li>L1 个人增强（IDE&#x2F;CLI）</li></ol><ul><li>能力：补全、问答、解释、测试生成；</li><li>要素：编辑器&#x2F;CLI 插件、项目内语义检索、标准化 Prompt 片段；</li><li>风险：数据外泄；</li><li>治理：脱敏、最小化、日志。</li></ul><ol start="2"><li>L2 任务代理（仓库内）</li></ol><ul><li>能力：脚手架、配置、代码改动、起容器、运行检查；</li><li>要素：Dev Containers、脚手架模板、沙箱命令白名单；</li><li>风险：越权；</li><li>治理：细粒度令牌、签名、PR 门禁。</li></ul><ol start="3"><li>L3 知识与工具编排（跨仓&#x2F;跨系统）</li></ol><ul><li>能力：从 ADR&#x2F;Runbook&#x2F;Issue 中拼装上下文，跨系统调用；</li><li>要素：MCP Registry、知识库索引、API 网关；</li><li>风险：供应链；</li><li>治理：SBOM、来源证明、调用审计。</li></ul><ol start="4"><li>L4 流水线级代理（CI&#x2F;CD）</li></ol><ul><li>能力：自动修复构建、生成变更说明、回退失败发布；</li><li>要素：事件触发、策略引擎、环境签名；</li><li>风险：发布事故；</li><li>治理：金丝雀、回滚阈值与止损脚本。</li></ul><ol start="5"><li>L5 组织级平台（Dev Portal + IDP + Policy-as-Code）</li></ol><ul><li>能力：项目模板、权限&#x2F;密钥自助、服务目录、度量治理；</li><li>要素：统一门户、单点登录、审计与合规模块；</li><li>风险：平台级单点故障；</li><li>治理：双活&#x2F;容灾、权限审计与定期红蓝演练。</li></ul><h2 id="落地清单（两周迭代）"><a href="#落地清单（两周迭代）" class="headerlink" title="落地清单（两周迭代）"></a>落地清单（两周迭代）</h2><ul><li>第 1 周：<ul><li>L1&#x2F;L2 到位：IDE&#x2F;CLI 接入、模板化脚手架、命令白名单、签名与 PR 模板；</li><li>搭起 Registry 骨架，登记知识库与常用工具；</li></ul></li><li>第 2 周：<ul><li>接入 CI 事件，试点“构建失败自动诊断与修复 PR”；</li><li>建立“代理行为”可观测（指标&#x2F;日志&#x2F;追踪）与回退阈值；</li><li>对敏感仓库与生产环境加多因子审批。</li></ul></li></ul><h2 id="成熟度评估问卷（摘选）"><a href="#成熟度评估问卷（摘选）" class="headerlink" title="成熟度评估问卷（摘选）"></a>成熟度评估问卷（摘选）</h2><ul><li>是否有统一的工具目录与权限模型？</li><li>是否能在 30 分钟内复现实验环境（容器&#x2F;依赖&#x2F;密钥）？</li><li>代理变更是否全量可审计、可签名、可回滚？</li><li>是否定义了“代理失败”的止损策略？</li><li>是否建立了“知识迭代—提示模板—策略”的闭环？</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>把 MCP 与代理纳入“平台 + 治理”视角，才能把零散效率转化为组织级生产力。五级模型是路线图，也是验收标准。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>GitHub Blog：Accelerate developer productivity with these 9 open source AI and MCP projects（2025-10-17）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;结合 GitHub 博客 10 月 17 日“开源 AI 与 MCP 项目”推荐与一周内的 Copilot&amp;#x2F;agents 系列文章</summary>
      
    
    
    
    <category term="软件工程" scheme="https://zhangxianda.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="DevEx" scheme="https://zhangxianda.com/tags/DevEx/"/>
    
    <category term="可观测" scheme="https://zhangxianda.com/tags/%E5%8F%AF%E8%A7%82%E6%B5%8B/"/>
    
    <category term="MCP Registry" scheme="https://zhangxianda.com/tags/MCP-Registry/"/>
    
    <category term="Agentic Workflows" scheme="https://zhangxianda.com/tags/Agentic-Workflows/"/>
    
    <category term="安全与合规" scheme="https://zhangxianda.com/tags/%E5%AE%89%E5%85%A8%E4%B8%8E%E5%90%88%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 量子安全笔记：云与企业的后量子迁移实战清单</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-quantum-pqc-cloud-migration-notes/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-quantum-pqc-cloud-migration-notes/</id>
    <published>2025-10-19T02:47:00.000Z</published>
    <updated>2025-10-20T00:49:30.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>NIST FIPS（ML-KEM&#x2F;ML-DSA&#x2F;SLH-DSA）标准落地后，主流云与浏览器陆续推进混合密钥交换与签名试点。对企业而言，2025 Q4 的关键词是“先混合，再替换”：以混合方案过渡、以证据链固化。本文整理一份“云 + 企业”的后量子迁移实战清单，覆盖 TLS&#x2F;PKI&#x2F;设备固件与审计证据。</p><h2 id="TLS：混合握手的三步走"><a href="#TLS：混合握手的三步走" class="headerlink" title="TLS：混合握手的三步走"></a>TLS：混合握手的三步走</h2><ul><li>资产画像：终端&#x2F;反向代理&#x2F;服务网格，确认支持度；</li><li>预发试点：启用 ML-KEM ∥ ECDHE 的混合 KEM，对握手大小&#x2F;延迟做基线；</li><li>灰度上线：移动端&#x2F;边缘优先做缓存&#x2F;复用策略，设置回退白名单。</li></ul><h2 id="PKI-与签名：分层替换"><a href="#PKI-与签名：分层替换" class="headerlink" title="PKI 与签名：分层替换"></a>PKI 与签名：分层替换</h2><ul><li>代码&#x2F;固件签名：引入 ML-DSA&#x2F;SLH-DSA 的双签策略，兼容旧链路；</li><li>证书体系：根&#x2F;中间&#x2F;叶子分阶段替换，CRL&#x2F;OCSP 监控到位；</li><li>证据透明：证书透明度日志与时间戳。</li></ul><h2 id="设备与边缘：从-Bootloader-开始"><a href="#设备与边缘：从-Bootloader-开始" class="headerlink" title="设备与边缘：从 Bootloader 开始"></a>设备与边缘：从 Bootloader 开始</h2><ul><li>Bootloader 支持新签名算法与密钥存储；</li><li>OTA：安全通道、签名验证与回滚；</li><li>低功耗设备：前置网关代理 + 渐进替换。</li></ul><h2 id="云端协同"><a href="#云端协同" class="headerlink" title="云端协同"></a>云端协同</h2><ul><li>负载均衡&#x2F;网关：检查 TLS 套件与证书链；</li><li>秘密管理：短期凭证、轮换与最小化；</li><li>可观测：握手成功率与性能指标纳入看板。</li></ul><h2 id="证据链与合规"><a href="#证据链与合规" class="headerlink" title="证据链与合规"></a>证据链与合规</h2><ul><li>SBOM：记录采用的算法&#x2F;版本&#x2F;证书；</li><li>审计：CVE—资产—变更—验证—回滚；</li><li>报告：面向客户&#x2F;监管的阶段性报告模板。</li></ul><h2 id="风险矩阵（样例）"><a href="#风险矩阵（样例）" class="headerlink" title="风险矩阵（样例）"></a>风险矩阵（样例）</h2><ul><li>性能：握手扩容与延迟上升 → 缓存&#x2F;复用&#x2F;会话票据；</li><li>互通：混合方案两端实现不一致 → 白名单&#x2F;灰度&#x2F;回退；</li><li>设备：低功耗&#x2F;小存储设备无法适配 → 网关代理&#x2F;分阶段替换；</li><li>运营：证书替换与过期 → 生命周期管理与告警；</li><li>证据：材料缺失 → 过程留痕与审计标准化。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>后量子迁移是一场“工程马拉松”。按“混合 → 替换”的节奏推进，把证据与观测放在同一条管线上，才能在性能、兼容与合规之间找到最优解。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>NIST FIPS（ML-KEM&#x2F;ML-DSA&#x2F;SLH-DSA）与浏览器&#x2F;云厂商过渡路线</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;NIST FIPS（ML-KEM&amp;#x2F;ML-DSA&amp;#x2F;SLH-DSA）标准落地后，主流云与浏览器陆续推进混合密钥交换与签名试点</summary>
      
    
    
    
    <category term="量子计算" scheme="https://zhangxianda.com/categories/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="PQC" scheme="https://zhangxianda.com/tags/PQC/"/>
    
    <category term="TLS 混合密钥交换" scheme="https://zhangxianda.com/tags/TLS-%E6%B7%B7%E5%90%88%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/"/>
    
    <category term="PKI 迁移" scheme="https://zhangxianda.com/tags/PKI-%E8%BF%81%E7%A7%BB/"/>
    
    <category term="设备固件" scheme="https://zhangxianda.com/tags/%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6/"/>
    
    <category term="合规证据" scheme="https://zhangxianda.com/tags/%E5%90%88%E8%A7%84%E8%AF%81%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python 3.14 正式版要点与迁移指南：类型系统、性能与科学栈的协同升级</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-python-3-14-overview-migration/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-python-3-14-overview-migration/</id>
    <published>2025-10-19T02:38:00.000Z</published>
    <updated>2025-10-20T00:49:23.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>Python 官方 FTP 目录显示 3.14.0 目录时间戳为 10 月上旬，同期 3.13.9&#x2F;3.12.12 维护线也完成更新。结合 10 月 9 日发布的 SciPy 2.0，2025 年 Q4 的 Python 升级呈现“双线并进”：运行时稳定性与性能优化、科学计算栈的模块化与现代化。本文面向工程团队与数据科学团队，给出 3.14 特性要点、迁移风险与一体化的构建&#x2F;发布策略。</p><h2 id="3-14-关注点（工程视角）"><a href="#3-14-关注点（工程视角）" class="headerlink" title="3.14 关注点（工程视角）"></a>3.14 关注点（工程视角）</h2><ul><li>类型与诊断：更严格&#x2F;更友好的错误信息与 typing 行为（以官方释义为准），提升大型项目可维护性；</li><li>性能：解释器&#x2F;对象模型&#x2F;IO 路径的细节优化（按发布说明为准），与 3.13 持续演化衔接；</li><li>ABI 与扩展：对 C 扩展的稳定性与 manylinux 轮子兼容性强调；</li><li>构建工具：PEP 517&#x2F;518 生态巩固，构建器与元数据更一致。</li></ul><h2 id="科学栈联动：SciPy-2-0-的“模块化-性能”"><a href="#科学栈联动：SciPy-2-0-的“模块化-性能”" class="headerlink" title="科学栈联动：SciPy 2.0 的“模块化 + 性能”"></a>科学栈联动：SciPy 2.0 的“模块化 + 性能”</h2><ul><li>BLAS&#x2F;LAPACK 后端策略与并行：结合 OpenBLAS&#x2F;oneMKL 等后端差异；</li><li>稀疏&#x2F;优化&#x2F;信号处理：在新版本中获得更一致的性能与接口整理；</li><li>模块化安装：减少容器镜像体积，适配函数即服务场景；</li><li>与 NumPy&#x2F;Numba&#x2F;Cython 的编译协同：“矢量化 + JIT”组合拳。</li></ul><h2 id="迁移策略（两阶段）"><a href="#迁移策略（两阶段）" class="headerlink" title="迁移策略（两阶段）"></a>迁移策略（两阶段）</h2><p>阶段 1：评估与预发</p><ul><li>单元&#x2F;集成&#x2F;性能基线对比（3.13 → 3.14）；</li><li>科学工作负载：对矩阵&#x2F;优化&#x2F;信号处理做 A&#x2F;B；</li><li>C 扩展：确保编译器&#x2F;标志&#x2F;本地库版本匹配；</li><li>容器：统一基础镜像与系统库（glibc&#x2F;musl）。</li></ul><p>阶段 2：灰度与回滚</p><ul><li>金丝雀流量，观察 p95&#x2F;p99 延迟与内存；</li><li>构建链固化：锁定构建后端与编译器；</li><li>证据链：SBOM&#x2F;签名&#x2F;外发白名单；</li><li>回滚阈值与按钮明确。</li></ul><h2 id="迁移案例（参考范式）"><a href="#迁移案例（参考范式）" class="headerlink" title="迁移案例（参考范式）"></a>迁移案例（参考范式）</h2><ul><li>电商报表：NumPy&#x2F;Polars + SciPy 优化，3.14 上验证线程&#x2F;IO 行为，确保夜间批处理窗口不扩大；</li><li>实时特征服务：Cython&#x2F;Numba 编译链固化，避免容器层差异导致的突发延迟；</li><li>知识问答：多进程&#x2F;多线程并发模型在 3.14 上的调度差异评估。</li></ul><h2 id="容器与部署建议"><a href="#容器与部署建议" class="headerlink" title="容器与部署建议"></a>容器与部署建议</h2><ul><li>基础镜像统一与最小化；</li><li>预热与 Lazy Import；</li><li>只读根文件系统与非 root 运行；</li><li>资源请求与 HPA 策略和“冷启动”权衡。</li></ul><h2 id="包管理现代化"><a href="#包管理现代化" class="headerlink" title="包管理现代化"></a>包管理现代化</h2><ul><li>工具：uv&#x2F;poetry&#x2F;pdm + pip-tools 锁定版本与缓存；</li><li>源：企业 PyPI 镜像与许可管理；</li><li>供应链：签名&#x2F;来源证明（Sigstore&#x2F;SLSA），镜像复现与差异分析。</li></ul><h2 id="典型风险"><a href="#典型风险" class="headerlink" title="典型风险"></a>典型风险</h2><ul><li>C 扩展 ABI 与 manylinux：容器环境不一致导致崩溃；</li><li>并行与线程：GIL 行为与 IO 阻塞的变化对少数工作负载有影响；</li><li>后端库错配：BLAS&#x2F;oneMKL 版本错配引发性能回退。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>3.14 与 SciPy 2.0 的“叠加器”效应，意味着团队不必在“稳定性与性能”之间二选一。把构建&#x2F;观测&#x2F;回滚统一到一条自动化流水线上，升级就能变成“例行运营”。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Python FTP：3.14.0（2025-10 上旬时间戳）、3.13.9&#x2F;3.12.12</li><li>SciPy 2.0（2025-10-09）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;Python 官方 FTP 目录显示 3.14.0 目录时间戳为 10 月上旬，同期 3.13.9&amp;#x2F;3.12.12 维护线也完成更</summary>
      
    
    
    
    <category term="Python" scheme="https://zhangxianda.com/categories/Python/"/>
    
    
    <category term="科学计算" scheme="https://zhangxianda.com/tags/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
    <category term="包管理" scheme="https://zhangxianda.com/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    <category term="维护版本" scheme="https://zhangxianda.com/tags/%E7%BB%B4%E6%8A%A4%E7%89%88%E6%9C%AC/"/>
    
    <category term="Python 3.14.0" scheme="https://zhangxianda.com/tags/Python-3-14-0/"/>
    
    <category term="兼容性" scheme="https://zhangxianda.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 Java 运维手册：围绕 25 LTS 与十月 CPU 的自动化升级与验证</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-java-25-lts-operations-automation/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-java-25-lts-operations-automation/</id>
    <published>2025-10-19T02:30:00.000Z</published>
    <updated>2025-10-20T00:49:15.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>10 月季度 CPU（Oracle Security Alerts 页预告）叠加 JDK 25 LTS 的落地，让“自动化升级与验证”成为 Java 团队十月的主任务。相较于单次补丁行动，企业需要一套可重复、可审计的工程管线，把“运行时升级—容器镜像—SBOM—回归—合规证据”打通。本文给出 25 LTS + Oct CPU 的运维自动化手册。</p><h2 id="升级对象与矩阵"><a href="#升级对象与矩阵" class="headerlink" title="升级对象与矩阵"></a>升级对象与矩阵</h2><ul><li>运行时：25 LTS 为首选，21&#x2F;17 LTS 同步跟进 CPU；</li><li>依赖：Jakarta EE&#x2F;Spring 等框架与原生依赖（OpenSSL&#x2F;zlib）；</li><li>容器：基础镜像、JDK 层、系统库；</li><li>TLS：关注混合 KEM 的兼容性验证（如 JEP 相关提案与生态实现）。</li></ul><h2 id="自动化流水线（CI-CD）"><a href="#自动化流水线（CI-CD）" class="headerlink" title="自动化流水线（CI&#x2F;CD）"></a>自动化流水线（CI&#x2F;CD）</h2><ol><li>构建阶段</li></ol><ul><li>统一 JDK 版本与构建镜像；</li><li>SCA 与 SBOM：生成含 JDK&#x2F;框架&#x2F;插件的完整 SBOM；</li><li>安全门禁：低于最低补丁级别的构建直接 fail。</li></ul><ol start="2"><li>测试阶段</li></ol><ul><li>兼容性：反射&#x2F;模块&#x2F;序列化&#x2F;网络；</li><li>性能：GC&#x2F;INP 等关键指标对比（基准或业务压测）；</li><li>TLS：混合 KEM&#x2F;证书链互通与回退策略；</li></ul><ol start="3"><li>发布与回滚</li></ol><ul><li>金丝雀 + 蓝绿；</li><li>版本指纹打点到日志；</li><li>回滚按钮与触发条件（SLO 异常、错误率、延迟）。</li></ul><h2 id="性能与兼容基线（示例思路）"><a href="#性能与兼容基线（示例思路）" class="headerlink" title="性能与兼容基线（示例思路）"></a>性能与兼容基线（示例思路）</h2><ul><li>场景：高并发 Web、批处理、消息队列消费者、TLS 双向认证；</li><li>指标：P95&#x2F;P99、GC 暂停、吞吐、CPU&#x2F;内存、线程；</li><li>基线：以 24 小时压测与真实流量回放为准，给出“上下阈”。</li></ul><h2 id="兼容矩阵（建议覆盖）"><a href="#兼容矩阵（建议覆盖）" class="headerlink" title="兼容矩阵（建议覆盖）"></a>兼容矩阵（建议覆盖）</h2><ul><li>框架：Spring&#x2F;Jakarta EE&#x2F;Netty&#x2F;Vert.x；</li><li>库：JSON&#x2F;序列化&#x2F;数据库驱动&#x2F;HTTP 客户端；</li><li>容器：Debian&#x2F;Ubuntu&#x2F;Alpine（glibc&#x2F;musl）；</li><li>TLS：不同客户端&#x2F;代理&#x2F;负载均衡器互通性。</li></ul><h2 id="供应链与合规"><a href="#供应链与合规" class="headerlink" title="供应链与合规"></a>供应链与合规</h2><ul><li>签名：制品与镜像签名（Sigstore&#x2F;Notary）；</li><li>证据链：CVE—资产—变更单—验证—回滚；</li><li>审计：外部审计可复用，满足监管&#x2F;客户要求。</li></ul><h2 id="常见风险"><a href="#常见风险" class="headerlink" title="常见风险"></a>常见风险</h2><ul><li>TLS 互通：套件&#x2F;证书链变化触发灰度失败；</li><li>反射封装：强封装影响旧行为；</li><li>容器差异：glibc&#x2F;musl 与 JIT&#x2F;GC 行为差异；</li><li>内存&#x2F;线程：JIT 与 GC 升级导致的性能波动。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>把 CPU 与 LTS 升级纳入“可复用的工程管线”，才能在多环境、多团队的大型组织中“既快又稳”。10 月是一次演练，更是把“合规证据”产品化的窗口期。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Oracle Security Alerts：Critical Patch Updates（Oct 2025）</li><li>各发行版公告（Temurin 等）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;10 月季度 CPU（Oracle Security Alerts 页预告）叠加 JDK 25 LTS 的落地，让“自动化升级与验证”成为 </summary>
      
    
    
    
    <category term="Java" scheme="https://zhangxianda.com/categories/Java/"/>
    
    
    <category term="供应链安全" scheme="https://zhangxianda.com/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
    <category term="Oracle CPU" scheme="https://zhangxianda.com/tags/Oracle-CPU/"/>
    
    <category term="Java 25 LTS" scheme="https://zhangxianda.com/tags/Java-25-LTS/"/>
    
    <category term="自动化验证" scheme="https://zhangxianda.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%AA%8C%E8%AF%81/"/>
    
    <category term="TLS/混合KEM" scheme="https://zhangxianda.com/tags/TLS-%E6%B7%B7%E5%90%88KEM/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 数字治理观察：从水印与指纹到权利人接口的治理“最小集合”</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-digital-governance-ai-watermark-rights/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-digital-governance-ai-watermark-rights/</id>
    <published>2025-10-19T02:22:00.000Z</published>
    <updated>2025-10-20T00:49:07.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>本周多家平台继续更新系统卡&#x2F;安全白皮书与内容治理说明，围绕“生成式视频&#x2F;音频”的合规与可追溯能力（稳健水印&#x2F;指纹、来源证明、权利人工具）持续加码。日本对动漫&#x2F;游戏 IP 的版权关切也持续被报道。治理的主线愈发清晰：合规不再是“事后删帖”，而是“事前约束 + 事中标识 + 事后可追溯”的系统工程。本文总结一个可被各方接受的“最小治理集合”。</p><h2 id="四方共识的最小集合"><a href="#四方共识的最小集合" class="headerlink" title="四方共识的最小集合"></a>四方共识的最小集合</h2><ul><li>训练数据类别披露（平台→社会）：<ul><li>披露类别级来源&#x2F;过滤策略，降低黑箱不信任；</li></ul></li><li>稳健水印与指纹（平台→公众&#x2F;第三方）：<ul><li>在音视频&#x2F;元数据层嵌入难以去除的水印；</li><li>提供公开校验 API 与校验工具；</li></ul></li><li>权利人接口（平台→权利人）：<ul><li>查询&#x2F;下架&#x2F;收益分配的自助通道；</li><li>白&#x2F;灰&#x2F;黑名单治理，控制“可生成&#x2F;不可生成”；</li></ul></li><li>肖像与声音授权（平台→用户）：<ul><li>自我出演&#x2F;声音合成需二次授权与用途限制；</li></ul></li><li>区域合规适配（平台→监管）：<ul><li>欧盟 AI 法案&#x2F;美国州法&#x2F;中国合成内容标识等。</li></ul></li></ul><h2 id="技术到制度的“变压器”"><a href="#技术到制度的“变压器”" class="headerlink" title="技术到制度的“变压器”"></a>技术到制度的“变压器”</h2><ul><li>水印&#x2F;指纹：<ul><li>生成端嵌入 + 传播端保留；</li><li>结合 C2PA&#x2F;内容凭证与发布平台协同；</li></ul></li><li>来源证明与取证：<ul><li>标准化日志与证据保存（时间戳、签名、哈希）；</li></ul></li><li>算法透明：<ul><li>发布系统卡与第三方评估；</li></ul></li><li>平台 API：<ul><li>对接权利人工具的速率限制、审计与滥用防护。</li></ul></li></ul><h2 id="企业与开发者的“合规模板”"><a href="#企业与开发者的“合规模板”" class="headerlink" title="企业与开发者的“合规模板”"></a>企业与开发者的“合规模板”</h2><ul><li>数据与素材：优先授权来源，保留来源证明与许可信息；</li><li>功能开关：对肖像&#x2F;声音&#x2F;敏感场景启用更严格的审核与用途限制；</li><li>发布与标识：启用平台水印&#x2F;指纹，展示内容凭证；</li><li>投诉与处置：1–2 个工作日内快速下架&#x2F;回滚，留痕可复核。</li></ul><h2 id="平台职责分层（参考）"><a href="#平台职责分层（参考）" class="headerlink" title="平台职责分层（参考）"></a>平台职责分层（参考）</h2><ul><li>生成层：水印&#x2F;指纹注入、来源凭证、模型与数据过滤策略；</li><li>传输层：跨平台保留水印、转码不破坏标识；</li><li>分发层：内容凭证展示、权利人接口、下架响应时限；</li><li>监管协同：跨平台&#x2F;跨法域的互认与执法协作通道。</li></ul><h2 id="合规对齐流程（模板）"><a href="#合规对齐流程（模板）" class="headerlink" title="合规对齐流程（模板）"></a>合规对齐流程（模板）</h2><ul><li>立项：用例评估与风险分级；</li><li>设计：水印&#x2F;指纹&#x2F;权利人接口接入方案；</li><li>开发：合规测试与滥用场景联调；</li><li>上线：灰度发布与监测；</li><li>运维：周期性审计与处置时限回顾。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>治理的目标不是“减速创新”，而是让创新“可持续、可协商”。当水印&#x2F;指纹&#x2F;权利人接口成为基础设施，各方的摩擦成本将显著下降，社会信任也有技术抓手。该“最小集合”适合作为 2025–2026 年度各平台与监管协作的共同底线。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>平台系统卡&#x2F;安全白皮书与水印&#x2F;指纹公开说明（2025-10 最新批次）</li><li>媒体关于日本动漫&#x2F;游戏 IP 版权关切的报道</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;本周多家平台继续更新系统卡&amp;#x2F;安全白皮书与内容治理说明，围绕“生成式视频&amp;#x2F;音频”的合规与可追溯能力（稳健水印&amp;#x2F;指</summary>
      
    
    
    
    <category term="数字治理" scheme="https://zhangxianda.com/categories/%E6%95%B0%E5%AD%97%E6%B2%BB%E7%90%86/"/>
    
    
    <category term="平台合规" scheme="https://zhangxianda.com/tags/%E5%B9%B3%E5%8F%B0%E5%90%88%E8%A7%84/"/>
    
    <category term="生成式内容" scheme="https://zhangxianda.com/tags/%E7%94%9F%E6%88%90%E5%BC%8F%E5%86%85%E5%AE%B9/"/>
    
    <category term="水印与指纹" scheme="https://zhangxianda.com/tags/%E6%B0%B4%E5%8D%B0%E4%B8%8E%E6%8C%87%E7%BA%B9/"/>
    
    <category term="版权与肖像" scheme="https://zhangxianda.com/tags/%E7%89%88%E6%9D%83%E4%B8%8E%E8%82%96%E5%83%8F/"/>
    
    <category term="权利人接口" scheme="https://zhangxianda.com/tags/%E6%9D%83%E5%88%A9%E4%BA%BA%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 网络安全周报：十月补丁节奏、KEV 新增与企业“72 小时窗口”法则</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-cybersecurity-weekly-patch-followup/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-cybersecurity-weekly-patch-followup/</id>
    <published>2025-10-19T02:14:00.000Z</published>
    <updated>2025-10-20T00:49:00.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>10 月第二周至第三周，微软“补丁星期二”后的跟踪与 CISA KEV 的新增（10-14、10-15）成为企业安全的主旋律；Oracle 也发布了 10 月季度 CPU 的预告。节奏很清晰：补丁发布 → 攻击者 PoC 与扫描 → KEV 纳入 → 企业“72 小时窗口”应急执行。本文以“周报 + 作战手册”的形式，将漏洞优先级、缓解策略、窗口编排与回滚复盘，整合为可落地的治理框架。</p><h2 id="形势与锚点"><a href="#形势与锚点" class="headerlink" title="形势与锚点"></a>形势与锚点</h2><ul><li>CISA KEV：<ul><li>10-14&#x2F;10-15 新增多条记录，涉及微软生态、三星、Adobe AEM 等（KEV 列表显示具体 CVE，如 CVE-2025-59230、47827、21043、4008 等）；</li><li>Due Date 多指向 10 月底&#x2F;11 月初，倒逼企业在 2–3 周内完成治理闭环；</li></ul></li><li>Oracle CPU：<ul><li>Security Alerts 页列出“Critical Patch Update - October 2025”的预告条目；</li></ul></li><li>结论：<ul><li>“72 小时窗口”并非完成全部修复，而是必须完成“发现—缓解—计划”的闭环。</li></ul></li></ul><h2 id="优先级模型：可利用性-×-业务权重-×-可达性"><a href="#优先级模型：可利用性-×-业务权重-×-可达性" class="headerlink" title="优先级模型：可利用性 × 业务权重 × 可达性"></a>优先级模型：可利用性 × 业务权重 × 可达性</h2><ul><li>可利用性：KEV &#x3D; 在野利用；</li><li>业务权重：外部暴露&#x2F;关键交易&#x2F;数据敏感度提升权重；</li><li>可达性：公网暴露&#x2F;跨租户&#x2F;弱鉴别；</li><li>产出：为每条 KEV 生成“资产列表 + 暴露途径 + 默认缓解策略”。</li></ul><h2 id="窗口编排：补丁、缓解与隔离并进"><a href="#窗口编排：补丁、缓解与隔离并进" class="headerlink" title="窗口编排：补丁、缓解与隔离并进"></a>窗口编排：补丁、缓解与隔离并进</h2><ul><li>立即缓解：<ul><li>补丁不可用时，WAF&#x2F;IPS 规则与功能关闭；</li><li>最小权限与网络分段，隔离高价值资产；</li></ul></li><li>预发验证：<ul><li>24h 内完成关键系统的预发补丁验证&#x2F;回退预案；</li></ul></li><li>灰度发布：<ul><li>外部暴露端点优先；</li><li>金丝雀与蓝绿机制确保可回退；</li></ul></li><li>长尾系统：<ul><li>纳入隔离清单与替换计划；</li><li>在 EASM 中标记“不可修复&#x2F;需替换”，定期复查。</li></ul></li></ul><h2 id="证据链与可观测"><a href="#证据链与可观测" class="headerlink" title="证据链与可观测"></a>证据链与可观测</h2><ul><li>证据：<ul><li>形成“CVE—资产—变更单—验证—回滚”的一条龙记录；</li><li>合同&#x2F;审计合规可复用；</li></ul></li><li>可观测：<ul><li>监控异常认证&#x2F;行为基线偏移&#x2F;入侵尝试；</li><li>对成功&#x2F;失败补丁生成周报与 Root Cause。</li></ul></li></ul><h2 id="行业案例与红蓝对抗"><a href="#行业案例与红蓝对抗" class="headerlink" title="行业案例与红蓝对抗"></a>行业案例与红蓝对抗</h2><ul><li>案例速写：某制造集团在补丁后出现“功能回退导致外部接口重新暴露”，最终通过 EASM 对比 + WAF 临时规则恢复；</li><li>红队建议：将“补丁空窗期”作为演练窗口，模拟多租户&#x2F;协作平台绕过与供应链插件投毒；</li><li>蓝队建议：把补丁&#x2F;配置变更映射到观测面板（变更 → 指标&#x2F;日志 → 告警），并做自动化“变更后 24 小时”复核。</li></ul><h2 id="测评指标与验收"><a href="#测评指标与验收" class="headerlink" title="测评指标与验收"></a>测评指标与验收</h2><ul><li>治理效率：从 KEV 纳入到“完成缓解”的平均时长；</li><li>修复质量：补丁后出现的回退&#x2F;二次处置占比；</li><li>曝光面：影子资产与长尾系统的识别与处置覆盖率；</li><li>合规：证据链完整度与审计发现项闭环率。</li></ul><h2 id="工具与平台联动"><a href="#工具与平台联动" class="headerlink" title="工具与平台联动"></a>工具与平台联动</h2><ul><li>ASM&#x2F;EASM：资产发现与影子资产纳管；</li><li>SIEM&#x2F;SOAR：从告警到自动化处置；</li><li>SCA&#x2F;SBOM：供应链级修复范围识别；</li><li>变更平台：策略门禁&#x2F;审批&#x2F;签名。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>补丁周期就是企业安全的“心跳”。用 KEV 做节拍器、用“72 小时窗口”做度量器，安全团队才能在有限时间内最大化降低可利用面，并将治理沉淀为可复用的流程资产。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>CISA KEV Catalog（含 2025-10-14&#x2F;15 的新增）</li><li>Oracle Security Alerts：Critical Patch Updates（Oct 2025 预告）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;10 月第二周至第三周，微软“补丁星期二”后的跟踪与 CISA KEV 的新增（10-14、10-15）成为企业安全的主旋律；Oracle </summary>
      
    
    
    
    <category term="网络安全" scheme="https://zhangxianda.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="攻击面管理" scheme="https://zhangxianda.com/tags/%E6%94%BB%E5%87%BB%E9%9D%A2%E7%AE%A1%E7%90%86/"/>
    
    <category term="CISA KEV" scheme="https://zhangxianda.com/tags/CISA-KEV/"/>
    
    <category term="Patch Tuesday" scheme="https://zhangxianda.com/tags/Patch-Tuesday/"/>
    
    <category term="漏洞优先级" scheme="https://zhangxianda.com/tags/%E6%BC%8F%E6%B4%9E%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
    <category term="变更回滚" scheme="https://zhangxianda.com/tags/%E5%8F%98%E6%9B%B4%E5%9B%9E%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19 人工智能周末复盘：开源 MCP 项目群与企业级 AI 工作流的协奏</title>
    <link href="https://zhangxianda.com/2025/10/19/2025-10-19-ai-mcp-open-source-digest/"/>
    <id>https://zhangxianda.com/2025/10/19/2025-10-19-ai-mcp-open-source-digest/</id>
    <published>2025-10-19T02:05:00.000Z</published>
    <updated>2025-10-20T00:48:53.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>GitHub 博客在 10 月 17 日推荐了 9 个“开源 AI 与 MCP 项目”，与本周早些时候关于 Copilot&#x2F;agentic 工作流的一系列文章一起，释放出强烈的产业信号：AI 不再仅是“模型 + 提示词”，而是“上下文工程 + 工具编排 + 环境可信”的完整工程系统。叠加 Hugging Face 与 Intel 在 C4 实例上展示的 CPU 推理路径（10 月 15–16 日），企业 AI 的“性能—成本—可用性”三角也在重排。本文从平台化、推理工程、编排治理三个层面，梳理 MCP 项目群对企业 AI 工程的现实价值与落地方法论。</p><h2 id="MCP-是什么：把“代理工作流”产品化的骨架"><a href="#MCP-是什么：把“代理工作流”产品化的骨架" class="headerlink" title="MCP 是什么：把“代理工作流”产品化的骨架"></a>MCP 是什么：把“代理工作流”产品化的骨架</h2><ul><li><p>概念要点：</p><ul><li>MCP（Model Context Protocol&#x2F;Platform 類型生态）关注“上下文注入 + 工具调用 + 安全隔离”，为代理&#x2F;助手提供标准化的接口与安全边界；</li><li>通过 Registry 与 SDK，统一“知识、工具、策略”的发现与接入，降低集成开销；</li><li>与 GitHub&#x2F;Copilot 的“Agentic Primitives”自然互补：计划、分解、工具调用、验证与回滚。</li></ul></li><li><p>对企业的直接意义：</p><ul><li>降低“把 LLM 接到企业系统”的摩擦；</li><li>安全基线更清晰（目录权限、网络边界、令牌最小化）；</li><li>上下文工程可复用（知识库、Runbook、ADR 等统一检索）。</li></ul></li></ul><h2 id="推理工程：CPU-GPU-分层与成本治理"><a href="#推理工程：CPU-GPU-分层与成本治理" class="headerlink" title="推理工程：CPU&#x2F;GPU 分层与成本治理"></a>推理工程：CPU&#x2F;GPU 分层与成本治理</h2><ul><li>背景锚点：Hugging Face × Intel 在 10 月 15–16 日发布的文章展示了在 Google Cloud C4 上以开源 GPT&#x2F;VLM 跑推理的实践，强调 TCO 改善与可用性优势。</li><li>实操要点：<ul><li>分层算力：GPU 负责超低延迟&#x2F;大模型；CPU 负责中等延迟&#x2F;中小模型与离线批；</li><li>量化&#x2F;蒸馏：以 PTQ&#x2F;QAT + 蒸馏形成“可用的轻量模型线”；</li><li>图优化：算子融合、内存布局、NUMA&#x2F;线程亲和；</li><li>观测与 FinOps：把 $cost&#x2F;token、tokens&#x2F;s 与 p99 统一进看板，驱动弹性扩缩容与策略降级。</li></ul></li></ul><h2 id="编排治理：从“能跑”到“可控、可审计、可回滚”"><a href="#编排治理：从“能跑”到“可控、可审计、可回滚”" class="headerlink" title="编排治理：从“能跑”到“可控、可审计、可回滚”"></a>编排治理：从“能跑”到“可控、可审计、可回滚”</h2><ul><li>上下文工程：<ul><li>用语义检索聚合代码&#x2F;文档&#x2F;工单&#x2F;日志，构建“事实优先”的上下文；</li><li>模板化系统提示（风格&#x2F;安全&#x2F;合规）；</li></ul></li><li>安全与合规：<ul><li>限权与隔离：目录&#x2F;网络&#x2F;命令白名单；</li><li>变更门禁：PR 模板、签名与 SBOM，代理生成变更需额外校验；</li></ul></li><li>可观测与回滚：<ul><li>将代理行为纳入指标&#x2F;日志&#x2F;追踪；</li><li>金丝雀发布与回退阈值明确化。</li></ul></li></ul><h2 id="典型用例全景（按价值优先级）"><a href="#典型用例全景（按价值优先级）" class="headerlink" title="典型用例全景（按价值优先级）"></a>典型用例全景（按价值优先级）</h2><ul><li>研发效率：需求拆解 → 脚手架 → 单测补全 → 运行诊断 → 生成修复 PR；</li><li>运维值班：从告警摘要到 Runbook 自动执行（只读&#x2F;只写分级管控）；</li><li>数据智能：日志&#x2F;指标&#x2F;追踪的跨源问答与根因建议；</li><li>客服&#x2F;运营：知识库检索 + 模板化回复 + 工单联动；</li><li>合规治理：PR 合规检查、依赖许可证扫描、外发脱敏与来源证明。</li></ul><h2 id="实施难点与对策"><a href="#实施难点与对策" class="headerlink" title="实施难点与对策"></a>实施难点与对策</h2><ul><li>知识陈旧：引入“时效策略”与分层缓存，标记过期文档并触发再训练&#x2F;再索引；</li><li>工具爆炸：以 Registry 做目录化治理，按业务域收敛工具；</li><li>环境差异：Dev Containers 统一依赖，减少“复现地狱”；</li><li>安全边界：命令&#x2F;网络&#x2F;目录白名单，令牌短期化与细分作用域；</li><li>失败闭环：将失败用例沉淀为“负样本”，用于提示模板与策略迭代。</li></ul><h2 id="评估指标（落地即度量）"><a href="#评估指标（落地即度量）" class="headerlink" title="评估指标（落地即度量）"></a>评估指标（落地即度量）</h2><ul><li>效能：平均交付周期（Lead Time）与变更失败率（CFR）；</li><li>体验：代理参与的 PR 合并率&#x2F;回滚率、提示迭代次数；</li><li>成本：$cost&#x2F;token、tokens&#x2F;s、GPU&#x2F;CPU 利用率与空转率；</li><li>质量：缺陷密度与 MTTR；</li><li>安全：越权尝试&#x2F;外发敏感事件&#x2F;审计覆盖率。</li></ul><h2 id="常见误区与纠偏"><a href="#常见误区与纠偏" class="headerlink" title="常见误区与纠偏"></a>常见误区与纠偏</h2><ul><li>只看 Demo 不看治理：未设置权限与审计，导致“隐形风险”；</li><li>泛化知识库：把未经校验的外部资料纳入上下文，引入错误事实；</li><li>过度依赖单一模型：未设置降级与回退，遇到服务抖动即“全面瘫痪”。</li></ul><h2 id="FAQ（选摘）"><a href="#FAQ（选摘）" class="headerlink" title="FAQ（选摘）"></a>FAQ（选摘）</h2><ul><li>问：如何控制外发到第三方模型的敏感数据？<ul><li>答：建立字段级脱敏策略与提示模板门禁，设置“敏感触发器”直接 fail，并将脱敏结果入审计。</li></ul></li><li>问：如何评估代理是否真的节省成本？<ul><li>答：以“每需求&#x2F;每缺陷”的端到端成本为单位，统计人工与算力开销，避免只看 token 成本。</li></ul></li></ul><h2 id="企业落地清单（两周）"><a href="#企业落地清单（两周）" class="headerlink" title="企业落地清单（两周）"></a>企业落地清单（两周）</h2><ul><li>平台：选定 MCP&#x2F;Registry 与 Dev Portal&#x2F;IDP 对接，统一授权与发现；</li><li>语义资产：搭建工程知识库（ADR&#x2F;Runbook&#x2F;告警用例）与索引；</li><li>推理：在 C4&#x2F;GPU 上分别跑通中小&#x2F;大型模型，建立性能&#x2F;成本基线；</li><li>工作流：把“需求→实现→测试→部署→回滚”的代理脚本化；</li><li>风险：对敏感数据脱敏与最小化暴露，严格审计外发调用。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>MCP 代表的是“AI 工程化的组织方式”。当上下文、工具与策略被规范化后，企业才能把“聪明的助手”变成“可靠的工程伙伴”。叠加 CPU 推理的成本优势，AI 的落地将更广泛而可控。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>GitHub Blog：Accelerate developer productivity with these 9 open source AI and MCP projects（2025-10-17）</li><li>Hugging Face Blog × Intel（2025-10-15&#x2F;16）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;GitHub 博客在 10 月 17 日推荐了 9 个“开源 AI 与 MCP 项目”，与本周早些时候关于 Copilot&amp;#x2F;age</summary>
      
    
    
    
    <category term="人工智能" scheme="https://zhangxianda.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="MCP" scheme="https://zhangxianda.com/tags/MCP/"/>
    
    <category term="开源项目" scheme="https://zhangxianda.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="开发者平台" scheme="https://zhangxianda.com/tags/%E5%BC%80%E5%8F%91%E8%80%85%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="推理与编排" scheme="https://zhangxianda.com/tags/%E6%8E%A8%E7%90%86%E4%B8%8E%E7%BC%96%E6%8E%92/"/>
    
    <category term="生产化" scheme="https://zhangxianda.com/tags/%E7%94%9F%E4%BA%A7%E5%8C%96/"/>
    
  </entry>
  
</feed>
