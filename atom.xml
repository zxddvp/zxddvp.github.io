<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张显达的个人博客</title>
  
  <subtitle>张显达 zxd blog</subtitle>
  <link href="https://zhangxianda.com/atom.xml" rel="self"/>
  
  <link href="https://zhangxianda.com/"/>
  <updated>2025-09-18T00:39:00.353Z</updated>
  <id>https://zhangxianda.com/</id>
  
  <author>
    <name>张显达</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件设计视角：多智能体编排与遗留系统解构</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-software-design-insights/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-software-design-insights/</id>
    <published>2025-09-18T02:50:00.000Z</published>
    <updated>2025-09-18T00:39:00.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计案例速览"><a href="#设计案例速览" class="headerlink" title="设计案例速览"></a>设计案例速览</h2><ul><li>LinkedIn 将内部消息基础设施改造成多智能体编排层，实现多步业务流程的全局协调，且无需重建核心协调组件（InfoQ，2025-09-15）。</li><li>Thoughtworks 咨询团队利用 Gemini 2.5 Pro 对无源代码的遗留系统进行逆向，仅两周便产出可验证的功能蓝图，显著压缩现代化改造周期（InfoQ，2025-09-16）。</li></ul><h2 id="关键设计要点"><a href="#关键设计要点" class="headerlink" title="关键设计要点"></a>关键设计要点</h2><ol><li><strong>以旧带新</strong>：复用成熟的消息、监控、日志组件，通过协议与编排层升级实现智能体协同，降低重构风险。</li><li><strong>AI 辅助分析</strong>：生成式 AI 可成为遗留系统解构与文档重建的高效助手，但需要以验证、评审机制收口，防止误判。</li><li><strong>可观测性先行</strong>：无论多代理还是遗留系统解构，均需强化事件追踪、指标与日志，以便在复杂流程中定位问题。</li></ol><h2 id="落地建议"><a href="#落地建议" class="headerlink" title="落地建议"></a>落地建议</h2><ul><li>对现有 SOA&#x2F;微服务架构进行调研，找出可复用的消息与调度能力，规划多智能体试点。</li><li>在遗留系统现代化项目中，尝试引入 LLM 辅助生成模块蓝图、接口文档，再由资深工程师审核。</li><li>设计阶段同步定义监控、告警与审计策略，确保系统复杂度提升的同时可维护性不下降。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《How LinkedIn Built Enterprise Multi-Agent AI on Existing Messaging Infrastructure》，2025-09-15。</li><li>InfoQ：《From Black Box to Blueprint: Thoughtworks Uses Generative AI to Extract Legacy System Functionality》，2025-09-16。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计案例速览&quot;&gt;&lt;a href=&quot;#设计案例速览&quot; class=&quot;headerlink&quot; title=&quot;设计案例速览&quot;&gt;&lt;/a&gt;设计案例速览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;LinkedIn 将内部消息基础设施改造成多智能体编排层，实现多步业务流程的全局协调，且无需重建</summary>
      
    
    
    
    <category term="软件设计" scheme="https://zhangxianda.com/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="多智能体" scheme="https://zhangxianda.com/tags/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
    <category term="遗留系统" scheme="https://zhangxianda.com/tags/%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="现代化" scheme="https://zhangxianda.com/tags/%E7%8E%B0%E4%BB%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>软件工具升级：Copilot Chat 接入开源模型与 .NET 性能诊断增强</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-software-tools-updates/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-software-tools-updates/</id>
    <published>2025-09-18T02:40:00.000Z</published>
    <updated>2025-09-18T00:38:52.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具更新"><a href="#工具更新" class="headerlink" title="工具更新"></a>工具更新</h2><ul><li>Hugging Face 推出与 GitHub Copilot Chat in VS Code 的集成，开发者可在编辑器内直接调用 Kimi K2、DeepSeek V3.1、GLM 4.5 等开源模型进行对比测试（InfoQ，2025-09-17）。</li><li>Azure Monitor 的 Application Insights Code Optimizations 功能现已与 .NET Profiler 深度整合，可自动识别 CPU、内存、线程瓶颈并给出修复建议（InfoQ，2025-09-17）。</li></ul><h2 id="工作流提升点"><a href="#工作流提升点" class="headerlink" title="工作流提升点"></a>工作流提升点</h2><ol><li><strong>多模型体验</strong>：无需离开 VS Code 即可在不同模型间切换，便于验证提示模板、推理质量、安全策略。</li><li><strong>性能洞察自动化</strong>：生产环境的 .NET 应用可以接受应用洞察提供的代码级建议，缩短定位瓶颈的时间。</li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li><strong>安全防护</strong>：在启用第三方模型时配置敏感信息屏蔽与请求限额，确保编辑器内不会泄露凭证。</li><li><strong>提示模板治理</strong>：建立 Prompt 库与复用机制，对常用任务设置版本控制和审核流程。</li><li><strong>性能回归</strong>：将 Application Insights 的优化建议纳入迭代节奏，执行前后对比测试，并记录结果以供复盘。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《Hugging Face Brings Open-Source LLMs to GitHub Copilot Chat in VS Code》，2025-09-17。</li><li>InfoQ：《Improved Application Insights Code Optimizations Identify .NET Performance Bottlenecks Automatically》，2025-09-17。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;工具更新&quot;&gt;&lt;a href=&quot;#工具更新&quot; class=&quot;headerlink&quot; title=&quot;工具更新&quot;&gt;&lt;/a&gt;工具更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Hugging Face 推出与 GitHub Copilot Chat in VS Code 的集成，开发者可</summary>
      
    
    
    
    <category term="软件工具" scheme="https://zhangxianda.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="GitHub Copilot" scheme="https://zhangxianda.com/tags/GitHub-Copilot/"/>
    
    <category term="Hugging Face" scheme="https://zhangxianda.com/tags/Hugging-Face/"/>
    
    <category term="Application Insights" scheme="https://zhangxianda.com/tags/Application-Insights/"/>
    
  </entry>
  
  <entry>
    <title>编程之道：以 C# 冲刺创业速度，与组织共成长</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-coding-craft/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-coding-craft/</id>
    <published>2025-09-18T02:30:00.000Z</published>
    <updated>2025-09-18T00:38:44.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观点速递"><a href="#观点速递" class="headerlink" title="观点速递"></a>观点速递</h2><ul><li>InfoQ 分享的《Questioning Convention: C# as a Shortcut to Startup Velocity》案例表明，现代 C# 生态凭借开源库、集成工具和高性能运行时，足以支撑初创团队快速迭代并获得首位付费客户（InfoQ，2025-09-17）。</li><li>InfoQ Podcast 邀请 Monzo 平台团队的 Suhail Patel 探讨如何在公司规模扩张时保持个人成长，强调随着组织成熟，工程师需主动扩展职责边界（InfoQ，2025-09-15）。</li></ul><h2 id="核心启发"><a href="#核心启发" class="headerlink" title="核心启发"></a>核心启发</h2><ol><li><strong>语言选型与速度</strong>：选择 C# 等具备完善生态与工具链的语言，可以降低基础设施投入，在验证商业模式时抢占先机。</li><li><strong>技术债务管理</strong>：速度不意味着牺牲质量，案例中通过性能测试、Profiling 和可观测性确保平台稳定。</li><li><strong>个人成长路径</strong>：组织扩张对工程师提出新要求，从“写代码”延伸到架构设计、团队协作与跨部门沟通。</li></ol><h2 id="可落地的行动"><a href="#可落地的行动" class="headerlink" title="可落地的行动"></a>可落地的行动</h2><ul><li><strong>框架评估</strong>：对现有语言栈进行 ROI 评估，确认是否存在可提升迭代速度的现代栈方案，并制定迁移试点。</li><li><strong>工程习惯</strong>：即使在初创阶段，也要建立性能基准、监控与回归测试，避免后期付出高昂重写成本。</li><li><strong>成长计划</strong>：与团队建立季度成长议程，结合公司规模变化明确技能升级目标，如领域建模、路线规划、辅导新人等。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《Presentation: Questioning Convention: C# as a Shortcut to Startup Velocity》，2025-09-17。</li><li>InfoQ Podcast：《Scaling Systems, Companies, and Careers with Suhail Patel》，2025-09-15。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;观点速递&quot;&gt;&lt;a href=&quot;#观点速递&quot; class=&quot;headerlink&quot; title=&quot;观点速递&quot;&gt;&lt;/a&gt;观点速递&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;InfoQ 分享的《Questioning Convention: C# as a Shortcut to St</summary>
      
    
    
    
    <category term="编程之道" scheme="https://zhangxianda.com/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
    <category term="C#" scheme="https://zhangxianda.com/tags/C/"/>
    
    <category term="职业发展" scheme="https://zhangxianda.com/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
    <category term="工程文化" scheme="https://zhangxianda.com/tags/%E5%B7%A5%E7%A8%8B%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据库情报：pgexporter 0.7 与 MySQL 写路径图解</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-database-insights/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-database-insights/</id>
    <published>2025-09-18T02:20:00.000Z</published>
    <updated>2025-09-18T00:38:35.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新版本速递"><a href="#新版本速递" class="headerlink" title="新版本速递"></a>新版本速递</h2><ul><li>PostgreSQL 社区发布 <strong>pgexporter 0.7</strong>，新增 autovacuum 指标、扩展 pg_stat_statements &#x2F; PostGIS &#x2F; pgvector 等监控支持，并完善手册（PostgreSQL.org，2025-09-17）。</li><li>Percona 推出《MySQL with Diagrams》系列第三篇，以图示方式讲解 InnoDB 写入流程，涵盖日志写入、脏页刷新、锁管理等环节（Percona Blog，2025-09-17）。</li></ul><h2 id="深度洞察"><a href="#深度洞察" class="headerlink" title="深度洞察"></a>深度洞察</h2><p>pgexporter 的扩展支持意味着越来越多自研&#x2F;第三方扩展可以纳入统一监控，减少自定义脚本负担；而 MySQL 写路径图解适合用于团队培训，帮助新同学快速理解 Buffer Pool、Redo&#x2F;Undo 日志与刷盘策略的连动关系。</p><h2 id="实践建议"><a href="#实践建议" class="headerlink" title="实践建议"></a>实践建议</h2><ol><li><strong>统一指标出口</strong>：将 pgexporter 作为 PostgreSQL 观测统一入口，与 pgSCV、pgMonitor 等工具错位使用，避免重复采集。</li><li><strong>构建图解文档</strong>：借鉴 Percona 图示思路，为团队常用数据库（PostgreSQL、MySQL、Redis 等）制作可视化运行手册。</li><li><strong>性能基线更新</strong>：配合新指标，对 autovacuum、扩展相关资源消耗进行基准测试，确保监控阈值合理。</li><li><strong>培训计划</strong>：在 DBA 或 SRE 培训课程中引入“写路径”专题，加深对事务提交、崩溃恢复机制的掌握。</li></ol><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>PostgreSQL.org：《pgexporter 0.7》，2025-09-17。</li><li>Percona Blog：《MySQL with Diagrams Part Three: The Life Story of the Writing Process》，2025-09-17。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;新版本速递&quot;&gt;&lt;a href=&quot;#新版本速递&quot; class=&quot;headerlink&quot; title=&quot;新版本速递&quot;&gt;&lt;/a&gt;新版本速递&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PostgreSQL 社区发布 &lt;strong&gt;pgexporter 0.7&lt;/strong&gt;，新增 a</summary>
      
    
    
    
    <category term="数据库" scheme="https://zhangxianda.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="PostgreSQL" scheme="https://zhangxianda.com/tags/PostgreSQL/"/>
    
    <category term="MySQL" scheme="https://zhangxianda.com/tags/MySQL/"/>
    
    <category term="观测性" scheme="https://zhangxianda.com/tags/%E8%A7%82%E6%B5%8B%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>推荐工具：FinePDFs 数据集与 pgSCV 0.15.0</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-tool-recommendations/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-tool-recommendations/</id>
    <published>2025-09-18T02:10:00.000Z</published>
    <updated>2025-09-18T00:38:24.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FinePDFs：面向长文本模型的-PDF-语料"><a href="#FinePDFs：面向长文本模型的-PDF-语料" class="headerlink" title="FinePDFs：面向长文本模型的 PDF 语料"></a>FinePDFs：面向长文本模型的 PDF 语料</h2><ul><li>发布方：Hugging Face（InfoQ，2025-09-15）。</li><li>规模：4.75 亿份 PDF、覆盖 1,733 种语言、约 3 万亿 tokens，总体积 3.65 TB。</li><li>亮点：针对长期被认为难以处理的 PDF 文档进行结构化清洗，为多语种、长上下文模型训练提供高质量样本。</li></ul><p><strong>使用建议</strong></p><ol><li>纳入数据治理：建立去重、脱敏流程，避免版权与敏感信息风险。</li><li>分层采样：根据业务场景（法规、技术、学术等）筛选子集，减少训练成本。</li><li>配套工具链：搭配 <code>pdfminer</code>, <code>PyMuPDF</code> 或自研解析流水线，将 PDF 转换为结构化文本。</li></ol><h2 id="pgSCV-0-15-0：PostgreSQL-监控出口"><a href="#pgSCV-0-15-0：PostgreSQL-监控出口" class="headerlink" title="pgSCV 0.15.0：PostgreSQL 监控出口"></a>pgSCV 0.15.0：PostgreSQL 监控出口</h2><ul><li>发布方：CHERTS 社区（PostgreSQL.org，2025-09-17）。</li><li>特性更新：<ul><li>增强 PostgreSQL v18 支持。</li><li>新增 AWS Aurora Postgres 采集，支持 <code>pg_is_wal_replay_paused()</code> 指标。</li><li>Patroni Collector 增加 <code>skip_conn_error_mode</code> 选项，提升容灾场景稳定性。</li></ul></li></ul><p><strong>部署要点</strong></p><ol><li>与 Prometheus 集成：在 <code>prometheus.yml</code> 中新增 <code>pgscv</code> job，并检验 Exporter 的性能开销。</li><li>指标分组：将集群状态、复制延迟、WAL 重放等关键指标纳入 Grafana 面板。</li><li>权限控制：为 Exporter 创建最小权限的数据库用户，限制只读视图。</li></ol><h2 id="额外提示"><a href="#额外提示" class="headerlink" title="额外提示"></a>额外提示</h2><ul><li>在使用海量 PDF 语料时，务必评估存储与带宽成本，可结合对象存储分区与生命周期管理策略。</li><li>对数据库监控组件的升级应与告警规则同步，避免指标命名变更导致监控盲区。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《Hugging Face Releases FinePDFs: a 3-Trillion-Token Dataset Built from PDFs》，2025-09-15。</li><li>PostgreSQL.org：《pgSCV 0.15.0 released!》，2025-09-17。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FinePDFs：面向长文本模型的-PDF-语料&quot;&gt;&lt;a href=&quot;#FinePDFs：面向长文本模型的-PDF-语料&quot; class=&quot;headerlink&quot; title=&quot;FinePDFs：面向长文本模型的 PDF 语料&quot;&gt;&lt;/a&gt;FinePDFs：面向长文本</summary>
      
    
    
    
    <category term="推荐工具" scheme="https://zhangxianda.com/categories/%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="PostgreSQL" scheme="https://zhangxianda.com/tags/PostgreSQL/"/>
    
    <category term="数据集" scheme="https://zhangxianda.com/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
    <category term="监控" scheme="https://zhangxianda.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>技术快报：可穿戴新形态与云平台竞争态势</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-tech-briefing/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-tech-briefing/</id>
    <published>2025-09-18T02:00:00.000Z</published>
    <updated>2025-09-18T00:38:06.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日速读"><a href="#今日速读" class="headerlink" title="今日速读"></a>今日速读</h2><ul><li><strong>Meta × Oakley</strong> 发布面向运动人群的 Meta Vanguard 智能眼镜，强调包裹式设计、防汗能力与运动传感器，定位跑者与骑行者（TechCrunch，2025-09-17；The Verge，2025-09-17）。</li><li><strong>Tesla</strong> 计划在安全调查后重新设计车门把手，尝试统一电子和手动释放机构，以解决用户被困的问题（TechCrunch，2025-09-17）。</li><li><strong>AWS</strong> 再次被 Gartner 评为云原生应用平台与容器管理领导者，凸显其在企业级云服务中的执行力与产品广度（AWS 官方博客，2025-09-15）。</li></ul><h2 id="趋势解读"><a href="#趋势解读" class="headerlink" title="趋势解读"></a>趋势解读</h2><p>可穿戴设备正从大众消费转向专业垂直场景，强调人体工学与传感可靠度；新能源汽车厂商面临来自监管和用户体验的双重压力，硬件设计需与软件远程更新协同；云平台竞争继续关注全面能力，多维度魔力象限背书将影响企业采购决策。</p><h2 id="关注要点"><a href="#关注要点" class="headerlink" title="关注要点"></a>关注要点</h2><ol><li><strong>硬件+服务一体化</strong>：运动智能眼镜与车载体验均体现出“硬件即入口、软件即服务”的运营模式，值得关注配套的订阅与数据权益。</li><li><strong>安全合规前置</strong>：汽车行业的硬件迭代被动响应监管，提醒其他行业在早期设计阶段就引入合规与安全评估。</li><li><strong>多云策略复盘</strong>：AWS 持续获认可的同时，也促使团队重新审视多云与单云策略，结合成本、功能覆盖和团队技能做综合判断。</li></ol><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>TechCrunch：《Meta unveils its new Oakley Meta Vanguard smart glasses for athletes》，2025-09-17。</li><li>The Verge：《The new Oakley Meta glasses are what athletes actually want》，2025-09-17。</li><li>TechCrunch：《Tesla is redesigning its door handles following safety probe》，2025-09-17。</li><li>AWS Blog：《AWS named as a Leader in 2025 Gartner Magic Quadrant for Cloud-Native Application Platforms and Container Management》，2025-09-15。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;今日速读&quot;&gt;&lt;a href=&quot;#今日速读&quot; class=&quot;headerlink&quot; title=&quot;今日速读&quot;&gt;&lt;/a&gt;今日速读&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Meta × Oakley&lt;/strong&gt; 发布面向运动人群的 Meta Vanguard 智</summary>
      
    
    
    
    <category term="技术快报" scheme="https://zhangxianda.com/categories/%E6%8A%80%E6%9C%AF%E5%BF%AB%E6%8A%A5/"/>
    
    
    <category term="可穿戴设备" scheme="https://zhangxianda.com/tags/%E5%8F%AF%E7%A9%BF%E6%88%B4%E8%AE%BE%E5%A4%87/"/>
    
    <category term="云计算" scheme="https://zhangxianda.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    <category term="电动汽车" scheme="https://zhangxianda.com/tags/%E7%94%B5%E5%8A%A8%E6%B1%BD%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>工具链观察：内部开发者平台与 MCP Registry 双线升级</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-toolchain-insights/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-toolchain-insights/</id>
    <published>2025-09-18T01:50:00.000Z</published>
    <updated>2025-09-18T00:37:55.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最新进展"><a href="#最新进展" class="headerlink" title="最新进展"></a>最新进展</h2><ul><li>Pinterest 发布 <strong>PinConsole</strong>，将部署、监控、服务管理等流程统一到内部开发者平台（IDP），以插件扩展 Kubernetes、gRPC、Postgres 等能力（InfoQ，2025-09-15）。</li><li>MCP Registry 正式上线，配合 Linux Foundation 的 Agentgateway 项目，为 AI 工具和代理服务提供公开注册与安全网关（InfoQ，2025-09-15）。</li></ul><h2 id="观察与思考"><a href="#观察与思考" class="headerlink" title="观察与思考"></a>观察与思考</h2><p>IDP 的价值在于把分散的工具以产品化体验提供给工程师，提升认知一致性；MCP Registry 则为多代理、工具互操作奠定标准化底座。随着企业纷纷引入 AI 工具链，两者的结合可以避免“影子系统”滋生，让授权、审计、扩展路径一体化。</p><h2 id="落地建议"><a href="#落地建议" class="headerlink" title="落地建议"></a>落地建议</h2><ol><li><strong>评估工具痛点</strong>：调研团队在发布、监控、服务接入中的痛点与重复劳动，为 IDP 定义最小可行集。</li><li><strong>插件化设计</strong>：借鉴 PinConsole 的插件机制，允许不同团队按需接入自定义流水线、报警、质量门禁。</li><li><strong>注册与发现</strong>：将内部脚本、AI 工具、数据库访问能力纳入统一注册中心，结合 MCP 思路记录元数据、授权策略与观测指标。</li><li><strong>安全与审计</strong>：为 IDP 与 MCP Gateway 制定审计日志规范和异常检测规则，确保工具调用透明可追踪。</li></ol><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《Pinterest Unifies Engineering Tools with New Pinconsole Platform》，2025-09-15。</li><li>InfoQ：《Introducing the MCP Registry》，2025-09-15。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最新进展&quot;&gt;&lt;a href=&quot;#最新进展&quot; class=&quot;headerlink&quot; title=&quot;最新进展&quot;&gt;&lt;/a&gt;最新进展&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Pinterest 发布 &lt;strong&gt;PinConsole&lt;/strong&gt;，将部署、监控、服务管理等流程统</summary>
      
    
    
    
    <category term="工具链" scheme="https://zhangxianda.com/categories/%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    
    
    <category term="DevOps" scheme="https://zhangxianda.com/tags/DevOps/"/>
    
    <category term="内部开发者平台" scheme="https://zhangxianda.com/tags/%E5%86%85%E9%83%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="MCP" scheme="https://zhangxianda.com/tags/MCP/"/>
    
  </entry>
  
  <entry>
    <title>后端值班日志：告警平台故障与供应链蠕虫双警示</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-backend-incident-digest/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-backend-incident-digest/</id>
    <published>2025-09-18T01:40:00.000Z</published>
    <updated>2025-09-18T00:37:44.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件速览"><a href="#事件速览" class="headerlink" title="事件速览"></a>事件速览</h2><ul><li>PagerDuty 发布 8 月 28 日重大事故复盘：Kafka 集群资源竞争导致全球大量客户告警静默，团队在报告中给出隔离与扩缩容改进计划（InfoQ，2025-09-16）。</li><li>SecurityWeek 披露 <strong>Shai-Hulud</strong> 供应链攻击，蠕虫感染超过 180 个 NPM 包以窃取密钥与机密（SecurityWeek，2025-09-17）。</li><li>同期报道显示，老旧的 <strong>Pixie Dust</strong> Wi-Fi 漏洞仍影响 20 款设备，提醒我们遗留协议风险长期存在（SecurityWeek，2025-09-17）。</li></ul><h2 id="运维启示"><a href="#运维启示" class="headerlink" title="运维启示"></a>运维启示</h2><ol><li><strong>事件管道冗余</strong>：关键告警平台仍可能失效，需部署二级通道（短信、语音、备选 SaaS）和自建兜底路径，定期演练“黑洞”场景。</li><li><strong>Kafka 资源治理</strong>：对内部 Kafka 集群执行限流、配额、隔离策略，避免突发峰值导致系统性雪崩。</li><li><strong>供应链防护</strong>：对 NPM、PyPI 等依赖启用签名校验与 SBOM 追踪，出现恶意包时能快速排查受影响服务。</li><li><strong>遗留资产排查</strong>：安全加固不仅针对新系统，需定期抽查网络设备、物联网与 Wi-Fi 接入点的固件与配置。</li></ol><h2 id="行动清单"><a href="#行动清单" class="headerlink" title="行动清单"></a>行动清单</h2><ul><li><input disabled="" type="checkbox"> 在值班 Runbook 中加入“告警通道失效”的紧急流程，并演练消息转发。</li><li><input disabled="" type="checkbox"> 建立 Kafka 容量仪表板，监控分区负载、磁盘、网络使用率，并设置超过阈值的自动扩容策略。</li><li><input disabled="" type="checkbox"> 在 CI 中引入 NPM 包完整性验证（如 <code>npm audit signatures</code> 或 Sigstore），并生成 SBOM。</li><li><input disabled="" type="checkbox"> 对 Wi-Fi&#x2F;网络硬件进行固件版本审计，确认供应商是否发布针对 Pixie Dust 的补丁。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《PagerDuty’s Kafka Outage Silences Alerts for Thousands of Companies》，2025-09-16。</li><li>SecurityWeek：《Shai-Hulud Supply Chain Attack: Worm Used to Steal Secrets, 180+ NPM Packages Hit》，2025-09-17。</li><li>SecurityWeek：《Decade-Old Pixie Dust Wi-Fi Hack Still Impacts Many Devices》，2025-09-17。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件速览&quot;&gt;&lt;a href=&quot;#事件速览&quot; class=&quot;headerlink&quot; title=&quot;事件速览&quot;&gt;&lt;/a&gt;事件速览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PagerDuty 发布 8 月 28 日重大事故复盘：Kafka 集群资源竞争导致全球大量客户告警静默，团队在</summary>
      
    
    
    
    <category term="后端" scheme="https://zhangxianda.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="PagerDuty" scheme="https://zhangxianda.com/tags/PagerDuty/"/>
    
    <category term="供应链攻击" scheme="https://zhangxianda.com/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB/"/>
    
    <category term="运维韧性" scheme="https://zhangxianda.com/tags/%E8%BF%90%E7%BB%B4%E9%9F%A7%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>前端技术速报：重新评估 Sass，与 XR 可及性同行</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-frontend-weekly/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-frontend-weekly/</id>
    <published>2025-09-18T01:30:00.000Z</published>
    <updated>2025-09-18T00:37:32.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="话题聚焦"><a href="#话题聚焦" class="headerlink" title="话题聚焦"></a>话题聚焦</h2><ul><li>CSS-Tricks 作者 Jeff Bridgforth 回顾 13 年的 Sass 使用历程，并提出在 CSS 原生能力增强后，应重新评估 Sass 的必要性（CSS-Tricks，2025-09-17）。</li><li>InfoQ 的 XR 无障碍演讲指出，“路缘坡效应”适用于沉浸式体验：优先满足无障碍需求，会催生适用于所有用户的创新交互（InfoQ，2025-09-16）。</li></ul><h2 id="为什么值得关注"><a href="#为什么值得关注" class="headerlink" title="为什么值得关注"></a>为什么值得关注</h2><p>CSS 原生已陆续补齐变量、嵌套、容器查询等特性，大量项目可以在保留简单构建流程的同时告别历史包袱；而 XR 场景的可访问性要求正在从“补丁”走向“设计前置”，这会直接影响语音代理、手势识别等多模态交互的优先级。</p><h2 id="行动建议"><a href="#行动建议" class="headerlink" title="行动建议"></a>行动建议</h2><ol><li><strong>工具链瘦身</strong>：盘点项目中 Sass 的实际使用点，尝试以原生 CSS 属性、Layer、@when 等新特性替换；对必须保留的场景，落实构建时间与依赖升级策略。</li><li><strong>样式重构节奏</strong>：结合设计迭代，在组件库层面建立“原生 CSS First”指引，减少编译器差异带来的 Bug。</li><li><strong>无障碍设计评审</strong>：在 XR&#x2F;3D 项目的设计评审中加入无障碍检查表，优先验证文本可读性、替代输入、空间音频提示等能力。</li><li><strong>团队知识分享</strong>：组织前端与设计、产品的联合分享会，介绍无障碍在 XR 领域的商业价值，争取更多资源投入。</li></ol><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li>CSS-Tricks：《Is it Time to Un-Sass?》，2025-09-17。</li><li>InfoQ：《Presentation: Accessible Innovation in XR: Maximizing the Curb Cut Effect》，2025-09-16。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;话题聚焦&quot;&gt;&lt;a href=&quot;#话题聚焦&quot; class=&quot;headerlink&quot; title=&quot;话题聚焦&quot;&gt;&lt;/a&gt;话题聚焦&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CSS-Tricks 作者 Jeff Bridgforth 回顾 13 年的 Sass 使用历程，并提出在 CS</summary>
      
    
    
    
    <category term="前端" scheme="https://zhangxianda.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://zhangxianda.com/tags/CSS/"/>
    
    <category term="无障碍" scheme="https://zhangxianda.com/tags/%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
    
    <category term="XR" scheme="https://zhangxianda.com/tags/XR/"/>
    
  </entry>
  
  <entry>
    <title>Java 25 LTS 上线带来的升级清单</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-java25-lts/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-java25-lts/</id>
    <published>2025-09-18T01:20:00.000Z</published>
    <updated>2025-09-18T00:37:20.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布速递"><a href="#发布速递" class="headerlink" title="发布速递"></a>发布速递</h2><p>Oracle 宣布 Java 25 成为继 JDK 21 之后的首个长期支持（LTS）版本，共收录 18 项 JEP，其中 7 项脱离孵化或预览阶段正式落地，另有 9 项聚焦性能与运行时提升（InfoQ，2025-09-16）。这意味著面向企业生产环境的功能与性能全面进化。</p><h2 id="值得关注的亮点"><a href="#值得关注的亮点" class="headerlink" title="值得关注的亮点"></a>值得关注的亮点</h2><ul><li><strong>性能与启动速度</strong>：包含 ZGC、G1 调优、字节码验证优化等一系列运行时改进，对高并发微服务友好。</li><li><strong>语言与库</strong>：结构化并发、记录模式等语言特性趋于稳定，有助于写出更简洁的模式匹配代码。</li><li><strong>工具链生态</strong>：LTS 身份将推动 IDE、构建工具和框架快速兼容，避免长时间停留在旧版本造成的安全与维护风险。</li></ul><h2 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h2><ol><li><strong>双轨环境验证</strong>：在测试环境同时部署 JDK 21 与 JDK 25，使用相同负载回放，量化吞吐与延迟差异。</li><li><strong>依赖兼容性排查</strong>：梳理三方库清单（如 Spring、Netty、Hibernate 等），确认其 JDK 25 支持矩阵，必要时采用 BOM 锁定版本。</li><li><strong>容器镜像更新</strong>：针对容器化应用，构建基于 JDK 25 的新基础镜像，核对镜像体积与安全补丁。</li><li><strong>监控基线重建</strong>：重跑性能基准与告警阈值，避免旧基线导致误判。</li></ol><h2 id="迁移路线图（示例）"><a href="#迁移路线图（示例）" class="headerlink" title="迁移路线图（示例）"></a>迁移路线图（示例）</h2><ul><li>第 1 周：搭建 JDK 25 测试环境，跑过单元测试与基础回归。</li><li>第 2 周：针对核心服务完成性能与兼容性压测，补齐 CI 中的目标版本。</li><li>第 3 周：灰度发布并监控指标，同步修订 SLO。</li><li>第 4 周：完成文档、知识分享，安排遗留系统跟进计划。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《Java 25, the Next LTS Release, Delivers Finalized Features and Focus on Performance and Runtime》，2025-09-16。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;发布速递&quot;&gt;&lt;a href=&quot;#发布速递&quot; class=&quot;headerlink&quot; title=&quot;发布速递&quot;&gt;&lt;/a&gt;发布速递&lt;/h2&gt;&lt;p&gt;Oracle 宣布 Java 25 成为继 JDK 21 之后的首个长期支持（LTS）版本，共收录 18 项 JEP，其中 </summary>
      
    
    
    
    <category term="Java" scheme="https://zhangxianda.com/categories/Java/"/>
    
    
    <category term="性能优化" scheme="https://zhangxianda.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="JDK25" scheme="https://zhangxianda.com/tags/JDK25/"/>
    
    <category term="企业升级" scheme="https://zhangxianda.com/tags/%E4%BC%81%E4%B8%9A%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>2025年9月18日AI安全情报：资本押注防御，攻防对抗升级</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-ai-security-digest/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-ai-security-digest/</id>
    <published>2025-09-18T01:10:00.000Z</published>
    <updated>2025-09-18T00:37:08.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资金与产业动向"><a href="#资金与产业动向" class="headerlink" title="资金与产业动向"></a>资金与产业动向</h2><ul><li><strong>Irregular</strong> 获得 8000 万美元融资，正在搭建面向 Claude、ChatGPT 等前沿模型的攻防实验室，用于验证越狱与渗透韧性（SecurityWeek，2025-09-17；TechCrunch，2025-09-17）。</li><li><strong>Scalekit</strong> 完成 550 万美元融资，聚焦大模型代理身份认证与出站动作控制，补齐“代理调用链”的安全缺口（SecurityWeek，2025-09-17）。</li></ul><h2 id="威胁态势"><a href="#威胁态势" class="headerlink" title="威胁态势"></a>威胁态势</h2><ul><li>俄罗斯“假新闻”网络借助 AI 重新上线 200 余个站点，自动生成政治虚假内容，凸显内容安全长期战（The Register，2025-09-18）。</li><li>ARMO 研究披露 io_uring 可以绕过多数 Linux 运行时安全工具，为攻击者提供隐藏通道（InfoQ，2025-09-16）。</li></ul><h2 id="安全要点拆解"><a href="#安全要点拆解" class="headerlink" title="安全要点拆解"></a>安全要点拆解</h2><ol><li><strong>多层测试防线</strong>：将资金驱动的红蓝对抗能力转化为常态化测试，在 CI&#x2F;CD 中加入提示注入、越权操作、模型幻觉等场景的基线用例。</li><li><strong>代理访问控制</strong>：对内外部代理统一接入网关，落实密钥轮换、最小权限与动作审计，将 Scalekit 类方案纳入评估列表。</li><li><strong>内容安全治理</strong>：建立敏感主题监测与水印策略，对高风险输出引入人工复核或二次确认对话，防范大规模信息操纵。</li><li><strong>运行时补盲</strong>：针对 io_uring 盲点扩展 eBPF、kprobe 等监控手段，并检查运行时安全产品的版本更新情况。</li></ol><h2 id="工作清单"><a href="#工作清单" class="headerlink" title="工作清单"></a>工作清单</h2><ul><li><input disabled="" type="checkbox"> 每季度安排一次第三方模型红队演练，覆盖越狱、数据投毒与注入链条。</li><li><input disabled="" type="checkbox"> 对所有代理服务补齐身份与动作双向鉴权，输出访问矩阵文档。</li><li><input disabled="" type="checkbox"> 对生成式内容发布链路执行水印与审计策略，并设置异常流量告警规则。</li><li><input disabled="" type="checkbox"> 升级运行时探针，验证 io_uring 操作是否能被记录与阻断。</li></ul><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>SecurityWeek：《Irregular Raises $80 Million for AI Security Testing Lab》，2025-09-17。</li><li>SecurityWeek：《Scalekit Raises $5.5 Million to Secure AI Agent Authentication》，2025-09-17。</li><li>The Register：《Russian fake-news network…》，2025-09-18。</li><li>InfoQ：《Linux Security Tools Bypassed by io_uring Rootkit Technique, ARMO Research Reveals》，2025-09-16。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;资金与产业动向&quot;&gt;&lt;a href=&quot;#资金与产业动向&quot; class=&quot;headerlink&quot; title=&quot;资金与产业动向&quot;&gt;&lt;/a&gt;资金与产业动向&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Irregular&lt;/strong&gt; 获得 8000 万美元融资，正在搭</summary>
      
    
    
    
    <category term="AI安全" scheme="https://zhangxianda.com/categories/AI%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="供应链安全" scheme="https://zhangxianda.com/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
    <category term="模型防御" scheme="https://zhangxianda.com/tags/%E6%A8%A1%E5%9E%8B%E9%98%B2%E5%BE%A1/"/>
    
    <category term="资金动向" scheme="https://zhangxianda.com/tags/%E8%B5%84%E9%87%91%E5%8A%A8%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>2025年9月18日人工智能观察：多智能体生态重构</title>
    <link href="https://zhangxianda.com/2025/09/18/2025-09-18-artificial-intelligence-digest/"/>
    <id>https://zhangxianda.com/2025/09/18/2025-09-18-artificial-intelligence-digest/</id>
    <published>2025-09-18T01:00:00.000Z</published>
    <updated>2025-09-18T00:36:54.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="焦点速览"><a href="#焦点速览" class="headerlink" title="焦点速览"></a>焦点速览</h2><ul><li>Kaggle 与 Google DeepMind 联合发布 <strong>Kaggle Game Arena</strong>，以策略类游戏持续评测模型推理质量，为复杂决策型 AI 提供常态化赛道（InfoQ，2025-09-16）。</li><li>LinkedIn 将现有消息基础设施升级为多智能体编排层，在不新增核心组件的前提下实现全球可用的多步工作流（InfoQ，2025-09-15）。</li><li>AI 芯片初创公司 <strong>Groq</strong> 完成新一轮融资，估值升至 69 亿美元，主打大模型推理场景的超低延迟芯片（TechCrunch，2025-09-17）。</li></ul><h2 id="深度解读"><a href="#深度解读" class="headerlink" title="深度解读"></a>深度解读</h2><p>Kaggle Game Arena 将模型能力评测从静态榜单转向动态对战，使得策略推理、长程规划和多步对抗得以真实暴露问题；LinkedIn 的工程实践展示了多智能体系统落地的“旧基建改造”路径——复用既有队列、消息和监控体系，重点在协调协议和观测面升级。硬件端，Groq 的高估值说明资本愿意为差异化算力买单，尤其是瞄准企业实时推理场景。三者共同勾勒出一条路径：用标准化评测驱动模型能力升级，用平台化架构承载智能体规模化，用专用算力压缩响应延迟。</p><h2 id="研发建议"><a href="#研发建议" class="headerlink" title="研发建议"></a>研发建议</h2><ol><li>将 Kaggle Game Arena 等竞争性评测引入模型验收流程，重点关注策略类任务的稳定度指标。</li><li>新建多智能体项目时优先盘点可复用的消息系统与观测体系，避免过早重建底层组件。</li><li>评估内部推理服务的延迟瓶颈，结合推理硬件（如 Groq、TPU、GPU）的成本模型，为不同业务线制定算力选型策略。</li></ol><h2 id="参考事件"><a href="#参考事件" class="headerlink" title="参考事件"></a>参考事件</h2><ul><li>InfoQ：《Kaggle Introduces Game Arena to Benchmark AI Models in Strategic Games》，2025-09-16。</li><li>InfoQ：《How LinkedIn Built Enterprise Multi-Agent AI on Existing Messaging Infrastructure》，2025-09-15。</li><li>TechCrunch：《Nvidia AI chip challenger Groq raises even more than expected, hits $6.9B valuation》，2025-09-17。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;焦点速览&quot;&gt;&lt;a href=&quot;#焦点速览&quot; class=&quot;headerlink&quot; title=&quot;焦点速览&quot;&gt;&lt;/a&gt;焦点速览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Kaggle 与 Google DeepMind 联合发布 &lt;strong&gt;Kaggle Game Arena&lt;</summary>
      
    
    
    
    <category term="人工智能" scheme="https://zhangxianda.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="模型评测" scheme="https://zhangxianda.com/tags/%E6%A8%A1%E5%9E%8B%E8%AF%84%E6%B5%8B/"/>
    
    <category term="多智能体" scheme="https://zhangxianda.com/tags/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
    <category term="AI基础设施" scheme="https://zhangxianda.com/tags/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
  </entry>
  
  <entry>
    <title>智能体设计与多工具编排</title>
    <link href="https://zhangxianda.com/ai/agents-design/"/>
    <id>https://zhangxianda.com/ai/agents-design/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.556Z</updated>
    
    <content type="html"><![CDATA[<p>智能体（Agent）是在给定目标下，能规划、调用工具、观测反馈并自我纠正的系统。本文聚焦工程中的可落地方案。</p>                        <h2>核心循环：计划—执行—反馈</h2>                        <ul>                            <li>计划：分解目标为若干可执行步骤（任务树/链）。</li>                            <li>执行：根据步骤选择并调用工具（函数调用/API/数据库/检索）。</li>                            <li>反馈：记录结果与异常；必要时回滚、重试或调整计划。</li>                        </ul>                        <h2>工具与选择策略</h2>                        <ul>                            <li>工具描述：严格定义输入/输出与异常；提供示例以降低调用错误率。</li>                            <li>工具选择：基于模型路由或规则；为关键工具设置人工确认阈值。</li>                            <li>组合模式：顺序（Chain）、并行（Fan-out/Fan-in）、条件分支（IF/ELSE）。</li>                        </ul>                        <h2>记忆与状态</h2>                        <ul>                            <li>短时记忆：本轮对话关键信息，控制上下文长度。</li>                            <li>长时记忆：以向量检索存储实体与事实；按场景检索注入。</li>                            <li>任务状态：显式状态机/事件驱动，便于监控与恢复。</li>                        </ul>                        <h2>验证与安全</h2>                        <ul>                            <li>结果验证：正则/Schema 校验、单元断言、冗余工具交叉验证。</li>                            <li>安全：权限最小化、输出过滤、工具沙箱、敏感操作二次确认。</li>                            <li>审计：结构化日志、追踪调用链、可观测性指标。</li>                        </ul>                        <h2>工程建议</h2>                        <ul>                            <li>优先明确目标与可衡量指标（任务成功率、时延、成本）。</li>                            <li>小步快跑：从“半自动 + 人审”迭代到全自动。</li>                            <li>降级方案：故障时切换到保守路径或人工接管。</li>                        </ul>                        <p>良好的智能体不在于“花哨提示词”，而在于清晰的边界、可靠的工具与严格的验证闭环。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;智能体（Agent）是在给定目标下，能规划、调用工具、观测反馈并自我纠正的系统。本文聚焦工程中的可落地方案。&lt;/p&gt;
                        &lt;h2&gt;核心循环：计划—执行—反馈&lt;/h2&gt;
                        &lt;ul&gt;
  </summary>
      
    
    
    
    <category term="人工智能" scheme="https://zhangxianda.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Dev Containers 项目环境</title>
    <link href="https://zhangxianda.com/tools/devcontainers-setup/"/>
    <id>https://zhangxianda.com/tools/devcontainers-setup/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.557Z</updated>
    
    <content type="html"><![CDATA[<p>Dev Containers 通过容器化封装编译器、依赖与工具链，实现“入职即用、环境一致、可重复”的研发体验。</p>                        <h2>核心组件</h2>                        <ul>                            <li><code>devcontainer.json</code>：定义镜像、扩展、端口转发、初始化命令。</li>                            <li>容器镜像：基于 <code>mcr.microsoft.com/devcontainers</code> 或自定义 Dockerfile。</li>                            <li>VS Code 扩展与设置：在容器中自动安装并应用。</li>                        </ul>                        <h2>落地步骤</h2>                        <ul>                            <li>选择基础镜像（node/python/java/go 等），编写 Dockerfile 安装系统依赖。</li>                            <li>配置 <code>devcontainer.json</code>（workspaceMount、postCreateCommand、features）。</li>                            <li>项目根目录放置 <code>.devcontainer</code>，团队共享。</li>                        </ul>                        <h2>团队治理</h2>                        <ul>                            <li>版本与变更：以代码评审方式管理环境；打标签并做发布说明。</li>                            <li>权限：容器内使用最小权限；对外资源用最小凭据。</li>                            <li>缓存与镜像：配置私有镜像仓库与构建缓存，加速拉取。</li>                        </ul>                        <p>总结：把“环境”纳入版本控制，是提升团队研发效率与可维护性的关键一环。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Dev Containers 通过容器化封装编译器、依赖与工具链，实现“入职即用、环境一致、可重复”的研发体验。&lt;/p&gt;
                        &lt;h2&gt;核心组件&lt;/h2&gt;
                        &lt;ul&gt;
         </summary>
      
    
    
    
    <category term="推荐工具" scheme="https://zhangxianda.com/categories/%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>企业级 RAG 蓝图：架构、实践与治理</title>
    <link href="https://zhangxianda.com/ai/enterprise-rag-blueprint/"/>
    <id>https://zhangxianda.com/ai/enterprise-rag-blueprint/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.557Z</updated>
    
    <content type="html"><![CDATA[<h2>1. 目标与边界</h2>                        <p>面向企业知识与流程的问答/助手，强调可追溯、可治理、可回归与低运维成本。</p>                        <ul>                            <li>目标：可信回答与来源引用、低幻觉率、统一评测与灰度机制。</li>                            <li>边界：仅回答授权范围内的问题；越权与无依据时优雅拒答。</li>                        </ul>                        <h2>2. 数据与知识库</h2>                        <ul>                            <li>采集：结构化（DB/接口）、半结构化（表格/文档）、非结构化（PDF/网页）。</li>                            <li>清洗与切分：去重、模板化抽取；按语义切分并保留层级/页码。</li>                            <li>索引：Embedding + 向量库（pgvector/Milvus/FAISS），配合倒排与重排。</li>                            <li>权限：元数据中记录 ACL/租户/标签，检索阶段过滤。</li>                        </ul>                        <h2>3. 检索与生成</h2>                        <ul>                            <li>召回：向量检索；必要时 BM25 混合检索；Top-k 召回 20–50。</li>                            <li>重排：cross-encoder 精排 5–8 段，显著降低幻觉与跑题。</li>                            <li>生成：提示模板注入片段；结构化输出（结论/要点/引用）。</li>                            <li>拒答策略：当证据不足时明确拒答并给出可能的下一步。</li>                        </ul>                        <h2>4. 智能体与工具</h2>                        <ul>                            <li>函数调用：数据库/检索/业务接口；输出验证与异常回退。</li>                            <li>工作流：计划—执行—反馈；长时任务使用队列与状态机。</li>                        </ul>                        <h2>5. 评测与回归</h2>                        <ul>                            <li>构建数据集：问答对/引用校验/拒答样例；覆盖关键业务域。</li>                            <li>自动回归：每次变更（数据/索引/提示/模型）触发评测与对比报告。</li>                            <li>指标：正确性、相关性、可追溯性、拒答准确性、成本与时延。</li>                        </ul>                        <h2>6. 安全与合规</h2>                        <ul>                            <li>输入治理：越狱/提示注入防护、敏感词与数据脱敏。</li>                            <li>输出治理：Schema 校验、判别器/规则、人工抽检与追责。</li>                            <li>合规：隐私、留痕与审批；第三方模型的数据边界说明。</li>                        </ul>                        <h2>7. 参考选型</h2>                        <ul>                            <li>模型/推理：OpenAI API、Anthropic、Google、vLLM/Ollama。</li>                            <li>框架：LangChain/LlamaIndex；评测：OpenAI Evals/自研。</li>                            <li>向量：pgvector/Milvus/Weaviate；重排：bge-reranker 等。</li>                        </ul>                        <h2>8. 交付与运维</h2>                        <ul>                            <li>多环境：数据/索引与提示版本化；灰度与回滚流程。</li>                            <li>可观测：指标/日志/追踪齐全；质量看板与告警闭环。</li>                        </ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;1. 目标与边界&lt;/h2&gt;
                        &lt;p&gt;面向企业知识与流程的问答/助手，强调可追溯、可治理、可回归与低运维成本。&lt;/p&gt;
                        &lt;ul&gt;
                         </summary>
      
    
    
    
    <category term="人工智能" scheme="https://zhangxianda.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Actions 最佳实践</title>
    <link href="https://zhangxianda.com/tools/github-actions-best-practices/"/>
    <id>https://zhangxianda.com/tools/github-actions-best-practices/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.557Z</updated>
    
    <content type="html"><![CDATA[<h2>1. 基础配置</h2>                        <ul>                            <li>触发器：合理使用 <code>push</code>/<code>pull_request</code>/<code>workflow_dispatch</code>；限制路径减少无效构建。</li>                            <li>Runner：优先使用官方托管；密集型任务可自建自托管 Runner。</li>                        </ul>                        <h2>2. 缓存与加速</h2>                        <ul>                            <li>使用 <code>actions/cache</code> 缓存依赖，键包含锁文件哈希与 OS/语言版本。</li>                            <li>多作业共享工件：<code>actions/upload-artifact</code> 与 <code>download-artifact</code>。</li>                        </ul>                        <h2>3. 矩阵与复用</h2>                        <ul>                            <li>矩阵构建：多平台/多版本并行测试，提高覆盖率。</li>                            <li>可复用工作流：<code>workflow_call</code> 提炼通用 CI 逻辑，团队复用。</li>                        </ul>                        <h2>4. 权限与安全</h2>                        <ul>                            <li>最小权限：显式设置 <code>permissions</code>，避免默认 <code>write-all</code>。</li>                            <li>密钥：全部放在 <code>Secrets</code>；切勿在日志回显；必要时加密写入。</li>                            <li>供应链：使用 SHA 固定第三方 Action 版本；配合 Dependabot/Renovate。</li>                        </ul>                        <h2>5. 质量与可观测</h2>                        <ul>                            <li>报告：测试覆盖率、构建用时趋势；关键失败自动 @ 责任人。</li>                            <li>并发与超时：避免队列积压；对长任务设置超时与取消策略。</li>                        </ul>                        <p>借助以上要点，CI/CD 能既快又稳，且更安全、可维护。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;1. 基础配置&lt;/h2&gt;
                        &lt;ul&gt;
                            &lt;li&gt;触发器：合理使用 &lt;code&gt;push&lt;/code&gt;/&lt;code&gt;pull_request&lt;/code&gt;/&lt;code&gt;wor</summary>
      
    
    
    
    <category term="推荐工具" scheme="https://zhangxianda.com/categories/%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Actions 与供应链安全</title>
    <link href="https://zhangxianda.com/tools/github-actions-supply-chain-security/"/>
    <id>https://zhangxianda.com/tools/github-actions-supply-chain-security/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.558Z</updated>
    
    <content type="html"><![CDATA[<h2>1. 权限与隔离</h2>                        <ul>                            <li>最小权限 permissions；细分环境密钥；复用工作流隔离职责。</li>                            <li>自托管 Runner 隔离与镜像加固；临时凭据与过期策略。</li>                        </ul>                        <h2>2. 依赖与制品</h2>                        <ul>                            <li>SBOM 生成（CycloneDX/Syft）；依赖扫描（Trivy/Dependabot）。</li>                            <li>制品签名（Sigstore/Cosign）；镜像签名与验证策略。</li>                        </ul>                        <h2>3. 供应链与流程</h2>                        <ul>                            <li>固定第三方 Action 版本（SHA）；审批与双人复核。</li>                            <li>变更日志与版本管理自动化；回滚与审计。</li>                        </ul>                        <h2>4. 事件响应</h2>                        <ul>                            <li>告警与抑制；凭据泄露扫描；应急禁用 Action 与密钥轮换。</li>                        </ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;1. 权限与隔离&lt;/h2&gt;
                        &lt;ul&gt;
                            &lt;li&gt;最小权限 permissions；细分环境密钥；复用工作流隔离职责。&lt;/li&gt;
                     </summary>
      
    
    
    
    <category term="推荐工具" scheme="https://zhangxianda.com/categories/%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenTelemetry 实战：指标、日志、追踪三板斧</title>
    <link href="https://zhangxianda.com/observability/opentelemetry-hands-on/"/>
    <id>https://zhangxianda.com/observability/opentelemetry-hands-on/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.558Z</updated>
    
    <content type="html"><![CDATA[<h2>1. 为什么是 OpenTelemetry</h2>                        <p>统一语义与 SDK，避免厂商锁定；在成本、迁移与可观测性深度间取得平衡。</p>                        <h2>2. 数据模型与采集面</h2>                        <ul>                            <li>Metrics：RED/USE 指标体系；直方图与基数问题；采样策略。</li>                            <li>Logs：结构化日志，关联 TraceId/SpanId；落地与保留策略。</li>                            <li>Traces：端到端链路；采样（Head/Tail）；关键属性建模。</li>                        </ul>                        <h2>3. 采集与导出</h2>                        <ul>                            <li>SDK/Auto Instrumentation；Exporter：OTLP/HTTP/gRPC。</li>                            <li>Collector：集中转发与加工（过滤、采样、重命名、聚合）。</li>                            <li>后端：Prometheus/Grafana、Tempo/Jaeger、Loki/ELK、云厂商。</li>                        </ul>                        <h2>4. Java 示例</h2>                        <pre class="line-numbers language-java"><code>// build.gradleimplementation("io.opentelemetry:opentelemetry-api:1.40.0")implementation("io.opentelemetry:opentelemetry-sdk:1.40.0")implementation("io.opentelemetry:opentelemetry-exporter-otlp:1.40.0")// 运行时：-Dotel.service.name=demo -Dotel.exporter.otlp.endpoint=http://otel-collector:4317</code></pre>                        <h2>5. 采样与成本</h2>                        <p>区分关键路径与普通请求；对高基数标签做降维；使用 Tail-based 采样保留异常与慢请求。</p>                        <h2>6. 治理与可用性</h2>                        <ul>                            <li>命名规范与标签基线；版本控制与回滚；集群故障降级。</li>                            <li>可视化：SLO/错误预算、服务依赖拓扑、容量与热度地图。</li>                        </ul>                        <h2>7. 与业务结合</h2>                        <p>将业务指标嵌入可观测三件套，构建从用户体验到服务内部的闭环。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;1. 为什么是 OpenTelemetry&lt;/h2&gt;
                        &lt;p&gt;统一语义与 SDK，避免厂商锁定；在成本、迁移与可观测性深度间取得平衡。&lt;/p&gt;
                        &lt;h2&gt;2. 数据模型与采集面&lt;/</summary>
      
    
    
    
    <category term="后端" scheme="https://zhangxianda.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>LLM 函数调用最佳实践</title>
    <link href="https://zhangxianda.com/ai/function-calling-best-practices/"/>
    <id>https://zhangxianda.com/ai/function-calling-best-practices/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.557Z</updated>
    
    <content type="html"><![CDATA[<h2>1. 工具协议设计</h2>                        <ul>                            <li>输入/输出 Schema、错误模型与幂等性；示例优先。</li>                            <li>安全边界：字段级校验与脱敏；速率与用量限制。</li>                        </ul>                        <h2>2. 工具选择与路由</h2>                        <ul>                            <li>少量高价值工具白名单；其余通过路由或回退策略触达。</li>                            <li>基于上下文的路由提示；失败回退至安全路径。</li>                        </ul>                        <h2>3. 执行与验证</h2>                        <ul>                            <li>Schema/正则/小模型判别器对输出二次校验。</li>                            <li>关键动作需人工确认或双因子；提供撤销与补偿。</li>                        </ul>                        <h2>4. 审计与可观测</h2>                        <ul>                            <li>记录调用链：工具参数、结果、耗时与错误；生成可回放日志。</li>                            <li>暴露指标：成功率/错误率/时延/成本；异常激增报警。</li>                        </ul>                        <h2>5. 典型陷阱</h2>                        <ul>                            <li>工具爆炸与提示冗长；缺少回退；错误吞没；权限过大。</li>                        </ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;1. 工具协议设计&lt;/h2&gt;
                        &lt;ul&gt;
                            &lt;li&gt;输入/输出 Schema、错误模型与幂等性；示例优先。&lt;/li&gt;
                           </summary>
      
    
    
    
    <category term="人工智能" scheme="https://zhangxianda.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>前端性能预算与监控实战</title>
    <link href="https://zhangxianda.com/frontend/performance-budget-monitoring/"/>
    <id>https://zhangxianda.com/frontend/performance-budget-monitoring/</id>
    <published>2025-09-11T16:00:00.000Z</published>
    <updated>2025-09-16T09:13:29.558Z</updated>
    
    <content type="html"><![CDATA[<h2>1. 指标与预算</h2>                        <ul>                            <li>Core Web Vitals：LCP、CLS、INP；性能预算设定方法。</li>                            <li>资源预算：JS/CSS/图片体积与请求数；首屏大小与关键路径。</li>                        </ul>                        <h2>2. 监控与报警</h2>                        <ul>                            <li>实时上报与采样；分维度看板；阈值报警与抑制。</li>                        </ul>                        <h2>3. 优化闭环</h2>                        <ul>                            <li>分包与懒加载；图片与字体优化；预加载与缓存。</li>                            <li>CI 阶段的 Lighthouse 分数守门与回归趋势。</li>                        </ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;1. 指标与预算&lt;/h2&gt;
                        &lt;ul&gt;
                            &lt;li&gt;Core Web Vitals：LCP、CLS、INP；性能预算设定方法。&lt;/li&gt;
                  </summary>
      
    
    
    
    <category term="前端" scheme="https://zhangxianda.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
